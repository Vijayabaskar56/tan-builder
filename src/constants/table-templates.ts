import { TableBuilder } from "@/db-collections/table-builder.collections";
import type { ColumnConfig, DataRow } from "@/types/table-types";

export interface TableTemplate {
	name: string;
	description: string;
	columns: ColumnConfig[];
	sampleData?: DataRow[];
	settings: TableBuilder["settings"];
}

export const tableTemplates: Record<string, TableTemplate> = {
	basicTable: {
		name: "Basic Table",
		description: "A simple table with data only, no additional features",
		columns: [
			{
				id: "id",
				accessor: "id",
				label: "ID",
				type: "number",
				order: 1,
			},
			{
				id: "product",
				accessor: "product",
				label: "Product",
				type: "string",
				order: 2,
			},
			{
				id: "price",
				accessor: "price",
				label: "Price",
				type: "number",
				order: 3,
			},
		],
		sampleData: [
			{ id: 1, product: "Laptop", price: 999.99 },
			{ id: 2, product: "Mouse", price: 25.99 },
			{ id: 3, product: "Keyboard", price: 79.99 },
			{ id: 4, product: "Monitor", price: 299.99 },
			{ id: 5, product: "Headphones", price: 149.99 },
			{ id: 6, product: "Webcam", price: 89.99 },
			{ id: 7, product: "Microphone", price: 199.99 },
			{ id: 8, product: "USB Drive", price: 39.99 },
			{ id: 9, product: "Power Bank", price: 49.99 },
			{ id: 10, product: "Cable", price: 15.99 },
		],
		settings: {
			isGlobalSearch: false,
			enableHiding: false,
			enableSorting: false,
			enableResizing: false,
			enablePinning: false,
			enableRowSelection: false,
			enableCRUD: false,
			enableColumnDragging: false,
			enableRowDragging: false,
			enablePagination: true,
			enableColumnMovable: false,
			tableLayout: {
				dense: false,
				cellBorder: false,
				rowBorder: true,
				rowRounded: false,
				stripped: false,
				headerBorder: true,
				headerSticky: false,
				width: "fixed",
			},
		},
	},
	rowSelectionTable: {
		name: "Table with Row Selection",
		description: "A table with row selection enabled",
		columns: [
			{
				id: "id",
				accessor: "id",
				label: "ID",
				type: "number",
				order: 1,
			},
			{
				id: "employee",
				accessor: "employee",
				label: "Employee",
				type: "string",
				order: 2,
			},
			{
				id: "department",
				accessor: "department",
				label: "Department",
				type: "enum",
				order: 3,
				hasFacetedFilter: true,
				possibleValues: ["Engineering", "Marketing", "Sales", "HR", "Finance"],
			},
		],
		sampleData: [
			{ id: 1, employee: "John Smith", department: "Engineering" },
			{ id: 2, employee: "Sarah Johnson", department: "Marketing" },
			{ id: 3, employee: "Mike Davis", department: "Sales" },
			{ id: 4, employee: "Emily Chen", department: "Engineering" },
			{ id: 5, employee: "David Wilson", department: "HR" },
			{ id: 6, employee: "Lisa Brown", department: "Finance" },
			{ id: 7, employee: "Tom Anderson", department: "Engineering" },
			{ id: 8, employee: "Anna Garcia", department: "Marketing" },
			{ id: 9, employee: "Chris Taylor", department: "Sales" },
			{ id: 10, employee: "Rachel Lee", department: "HR" },
		],
		settings: {
			isGlobalSearch: false,
			enableHiding: false,
			enableSorting: false,
			enableResizing: false,
			enablePinning: false,
			enableRowSelection: true,
			enableCRUD: true,
			enableColumnDragging: false,
			enableRowDragging: false,
			enablePagination: true,
			enableColumnMovable: false,
			tableLayout: {
				dense: true,
				cellBorder: false,
				rowBorder: true,
				rowRounded: false,
				stripped: false,
				headerBorder: true,
				headerSticky: false,
				width: "fixed",
			},
		},
	},
	filtersTable: {
		name: "Data Table with Filters",
		description: "A table with advanced filtering capabilities",
		columns: [
			{
				id: "id",
				accessor: "id",
				label: "ID",
				type: "number",
				filterable: true,
				order: 1,
			},
			{
				id: "category",
				accessor: "category",
				label: "Category",
				type: "enum",
				order: 2,
				hasFacetedFilter: true,
				filterable: true,
				possibleValues: ["A", "B", "C"],
			},
			{
				id: "priority",
				accessor: "priority",
				label: "Priority",
				type: "enum",
				order: 3,
				hasFacetedFilter: true,
				filterable: true,
				possibleValues: ["High", "Medium", "Low"],
			},
			{
				id: "date",
				accessor: "date",
				label: "Date",
				type: "date",
				filterable: true,
				order: 4,
			},
		],
		sampleData: Array.from({ length: 20 }, (_, i) => ({
			id: i + 1,
			category: ["A", "B", "C"][i % 3],
			priority: ["High", "Medium", "Low"][i % 3],
			date: `2023-01-${String(i + 1).padStart(2, "0")}`,
		})),
		settings: {
			isGlobalSearch: true,
			enableHiding: true,
			enableSorting: true,
			enableResizing: false,
			enablePinning: false,
			enableRowSelection: false,
			enableCRUD: false,
			enableColumnDragging: false,
			enableRowDragging: false,
			enablePagination: true,
			enableColumnMovable: false,
			tableLayout: {
				dense: false,
				cellBorder: false,
				rowBorder: true,
				rowRounded: false,
				stripped: true,
				headerBorder: true,
				headerSticky: false,
				width: "fixed",
			},
		},
	},
	coloumDragableTable: {
		name: "Resizable and Sortable Columns",
		description: "A table with resizable and sortable columns",
		columns: [
			{
				id: "id",
				accessor: "id",
				label: "ID",
				type: "number",
				order: 1,
			},
			{
				id: "name",
				accessor: "name",
				label: "Name",
				type: "string",
				order: 2,
			},
			{
				id: "score",
				accessor: "score",
				label: "Score",
				type: "number",
				order: 3,
			},
			{
				id: "active",
				accessor: "active",
				label: "Active",
				type: "boolean",
				order: 4,
			},
		],
		sampleData: Array.from({ length: 20 }, (_, i) => ({
			id: i + 1,
			name: `Item ${i + 1}`,
			score: Math.floor(Math.random() * 100),
			active: i % 2 === 0,
		})),
		settings: {
			isGlobalSearch: true,
			enableHiding: true,
			enableSorting: true,
			enableResizing: false,
			enablePinning: false,
			enableRowSelection: false,
			enableCRUD: false,
			enableColumnDragging: true,
			enableRowDragging: false,
			enablePagination: true,
			enableColumnMovable: false,
			tableLayout: {
				dense: false,
				cellBorder: false,
				rowBorder: true,
				rowRounded: false,
				stripped: false,
				headerBorder: true,
				headerSticky: true,
				width: "fixed",
			},
		},
	},
	ResiableAndPinnableColoumTable: {
		name: "Resizable and Sortable Columns",
		description: "A table with resizable and sortable columns",
		columns: [
			{
				id: "id",
				accessor: "id",
				label: "ID",
				type: "number",
				order: 1,
			},
			{
				id: "name",
				accessor: "name",
				label: "Name",
				type: "string",
				order: 2,
			},
			{
				id: "score",
				accessor: "score",
				label: "Score",
				type: "number",
				order: 3,
			},
			{
				id: "active",
				accessor: "active",
				label: "Active",
				type: "boolean",
				order: 4,
			},
		],
		sampleData: Array.from({ length: 20 }, (_, i) => ({
			id: i + 1,
			name: `Item ${i + 1}`,
			score: Math.floor(Math.random() * 100),
			active: i % 2 === 0,
		})),
		settings: {
			isGlobalSearch: true,
			enableHiding: true,
			enableSorting: true,
			enableResizing: true,
			enablePinning: true,
			enableRowSelection: false,
			enableCRUD: false,
			enableColumnDragging: false,
			enableRowDragging: false,
			enablePagination: true,
			enableColumnMovable: false,
			tableLayout: {
				dense: false,
				cellBorder: false,
				rowBorder: true,
				rowRounded: true,
				stripped: false,
				headerBorder: true,
				headerSticky: false,
				width: "fixed",
			},
		},
	},
	FilterWIthRowSelectionAndActionTable: {
		name: "Data Table with Filters",
		description: "A table with advanced filtering capabilities",
		columns: [
			{
				id: "id",
				accessor: "id",
				label: "ID",
				type: "number",
				filterable: true,
				order: 1,
			},
			{
				id: "category",
				accessor: "category",
				label: "Category",
				type: "string",
				order: 2,
				hasFacetedFilter: true,
				filterable: true,
			},
			{
				id: "priority",
				accessor: "priority",
				label: "Priority",
				type: "string",
				order: 3,
				hasFacetedFilter: true,
				filterable: true,
			},
			{
				id: "date",
				accessor: "date",
				label: "Date",
				type: "date",
				filterable: true,
				order: 4,
			},
		],
		sampleData: Array.from({ length: 20 }, (_, i) => ({
			id: i + 1,
			category: ["A", "B", "C"][i % 3],
			priority: ["High", "Medium", "Low"][i % 3],
			date: `2023-01-${String(i + 1).padStart(2, "0")}`,
		})),
		settings: {
			isGlobalSearch: true,
			enableHiding: true,
			enableSorting: true,
			enableResizing: false,
			enablePinning: true,
			enableRowSelection: true,
			enableCRUD: true,
			enableColumnDragging: false,
			enableRowDragging: false,
			enablePagination: true,
			enableColumnMovable: true,
			tableLayout: {
				dense: false,
				cellBorder: true,
				rowBorder: true,
				rowRounded: false,
				stripped: false,
				headerBorder: true,
				headerSticky: false,
				width: "fixed",
			},
		},
	},
	sortableTable: {
		name: "Sortable Table",
		description: "A table with sorting enabled for all columns",
		columns: [
			{
				id: "id",
				accessor: "id",
				label: "ID",
				type: "number",
				order: 1,
			},
			{
				id: "name",
				accessor: "name",
				label: "Name",
				type: "string",
				order: 2,
			},
			{
				id: "value",
				accessor: "value",
				label: "Value",
				type: "number",
				order: 3,
			},
		],
		sampleData: Array.from({ length: 20 }, (_, i) => ({
			id: i + 1,
			name: `Item ${i + 1}`,
			value: Math.floor(Math.random() * 1000),
		})),
		settings: {
			isGlobalSearch: false,
			enableHiding: false,
			enableSorting: true,
			enableResizing: false,
			enablePinning: false,
			enableRowSelection: false,
			enableCRUD: false,
			enableColumnDragging: false,
			enableRowDragging: false,
			enablePagination: true,
			enableColumnMovable: false,
			tableLayout: {
				dense: false,
				cellBorder: false,
				rowBorder: true,
				rowRounded: false,
				stripped: false,
				headerBorder: true,
				headerSticky: false,
				width: "fixed",
			},
		},
	},
	searchableTable: {
		name: "Searchable Table",
		description: "A table with global search functionality",
		columns: [
			{
				id: "id",
				accessor: "id",
				label: "ID",
				type: "number",
				order: 1,
			},
			{
				id: "name",
				accessor: "name",
				label: "Name",
				type: "string",
				order: 2,
			},
			{
				id: "description",
				accessor: "description",
				label: "Description",
				type: "string",
				order: 3,
			},
		],
		sampleData: Array.from({ length: 20 }, (_, i) => ({
			id: i + 1,
			name: `Item ${i + 1}`,
			description: `Description for item ${i + 1}`,
		})),
		settings: {
			isGlobalSearch: true,
			enableHiding: false,
			enableSorting: false,
			enableResizing: false,
			enablePinning: false,
			enableRowSelection: false,
			enableCRUD: false,
			enableColumnDragging: false,
			enableRowDragging: false,
			enablePagination: true,
			enableColumnMovable: false,
			tableLayout: {
				dense: false,
				cellBorder: false,
				rowBorder: true,
				rowRounded: false,
				stripped: false,
				headerBorder: true,
				headerSticky: false,
				width: "fixed",
			},
		},
	},
	denseTable: {
		name: "Dense Table",
		description: "A compact table with dense layout",
		columns: [
			{
				id: "id",
				accessor: "id",
				label: "ID",
				type: "number",
				order: 1,
			},
			{
				id: "name",
				accessor: "name",
				label: "Name",
				type: "string",
				order: 2,
			},
			{
				id: "status",
				accessor: "status",
				label: "Status",
				type: "enum",
				order: 3,
				possibleValues: ["Active", "Inactive"],
			},
		],
		sampleData: Array.from({ length: 20 }, (_, i) => ({
			id: i + 1,
			name: `Item ${i + 1}`,
			status: ["Active", "Inactive"][i % 2],
		})),
		settings: {
			isGlobalSearch: false,
			enableHiding: false,
			enableSorting: false,
			enableResizing: false,
			enablePinning: false,
			enableRowSelection: false,
			enableCRUD: false,
			enableColumnDragging: false,
			enableRowDragging: false,
			enablePagination: true,
			enableColumnMovable: false,
			tableLayout: {
				dense: true,
				cellBorder: false,
				rowBorder: true,
				rowRounded: false,
				stripped: false,
				headerBorder: true,
				headerSticky: false,
				width: "fixed",
			},
		},
	},
	strippedTable: {
		name: "Stripped Table",
		description: "A table with alternating row colors",
		columns: [
			{
				id: "id",
				accessor: "id",
				label: "ID",
				type: "number",
				order: 1,
			},
			{
				id: "name",
				accessor: "name",
				label: "Name",
				type: "string",
				order: 2,
			},
			{
				id: "value",
				accessor: "value",
				label: "Value",
				type: "number",
				order: 3,
			},
		],
		sampleData: Array.from({ length: 20 }, (_, i) => ({
			id: i + 1,
			name: `Item ${i + 1}`,
			value: Math.floor(Math.random() * 1000),
		})),
		settings: {
			isGlobalSearch: false,
			enableHiding: false,
			enableSorting: false,
			enableResizing: false,
			enablePinning: false,
			enableRowSelection: false,
			enableCRUD: false,
			enableColumnDragging: false,
			enableRowDragging: false,
			enablePagination: true,
			enableColumnMovable: false,
			tableLayout: {
				dense: false,
				cellBorder: false,
				rowBorder: true,
				rowRounded: false,
				stripped: true,
				headerBorder: true,
				headerSticky: false,
				width: "fixed",
			},
		},
	},
	stickyHeaderTable: {
		name: "Sticky Header Table",
		description:
			"A table with a sticky header that stays visible while scrolling",
		columns: [
			{
				id: "id",
				accessor: "id",
				label: "ID",
				type: "number",
				order: 1,
			},
			{
				id: "name",
				accessor: "name",
				label: "Name",
				type: "string",
				order: 2,
			},
			{
				id: "value",
				accessor: "value",
				label: "Value",
				type: "number",
				order: 3,
			},
		],
		sampleData: Array.from({ length: 50 }, (_, i) => ({
			id: i + 1,
			name: `Item ${i + 1}`,
			value: Math.floor(Math.random() * 1000),
		})),
		settings: {
			isGlobalSearch: false,
			enableHiding: false,
			enableSorting: false,
			enableResizing: false,
			enablePinning: false,
			enableRowSelection: false,
			enableCRUD: false,
			enableColumnDragging: false,
			enableRowDragging: false,
			enablePagination: true,
			enableColumnMovable: false,
			tableLayout: {
				dense: false,
				cellBorder: false,
				rowBorder: true,
				rowRounded: false,
				stripped: false,
				headerBorder: true,
				headerSticky: true,
				width: "fixed",
			},
		},
	},
	autoWidthTable: {
		name: "Auto Width Table",
		description: "A table with automatic column widths",
		columns: [
			{
				id: "id",
				accessor: "id",
				label: "ID",
				type: "number",
				order: 1,
			},
			{
				id: "name",
				accessor: "name",
				label: "Name",
				type: "string",
				order: 2,
			},
			{
				id: "description",
				accessor: "description",
				label: "Description",
				type: "string",
				order: 3,
			},
		],
		sampleData: Array.from({ length: 20 }, (_, i) => ({
			id: i + 1,
			name: `Item ${i + 1}`,
			description: `This is a longer description for item ${i + 1} to demonstrate auto width`,
		})),
		settings: {
			isGlobalSearch: false,
			enableHiding: false,
			enableSorting: false,
			enableResizing: false,
			enablePinning: false,
			enableRowSelection: false,
			enableCRUD: false,
			enableColumnDragging: false,
			enableRowDragging: false,
			enablePagination: true,
			enableColumnMovable: false,
			tableLayout: {
				dense: false,
				cellBorder: false,
				rowBorder: true,
				rowRounded: false,
				stripped: false,
				headerBorder: true,
				headerSticky: false,
				width: "auto",
			},
		},
	},
	borderedTable: {
		name: "Bordered Table",
		description: "A table with borders around cells",
		columns: [
			{
				id: "id",
				accessor: "id",
				label: "ID",
				type: "number",
				order: 1,
			},
			{
				id: "name",
				accessor: "name",
				label: "Name",
				type: "string",
				order: 2,
			},
			{
				id: "value",
				accessor: "value",
				label: "Value",
				type: "number",
				order: 3,
			},
		],
		sampleData: Array.from({ length: 20 }, (_, i) => ({
			id: i + 1,
			name: `Item ${i + 1}`,
			value: Math.floor(Math.random() * 1000),
		})),
		settings: {
			isGlobalSearch: false,
			enableHiding: false,
			enableSorting: false,
			enableResizing: false,
			enablePinning: false,
			enableRowSelection: false,
			enableCRUD: false,
			enableColumnDragging: false,
			enableRowDragging: false,
			enablePagination: true,
			enableColumnMovable: false,
			tableLayout: {
				dense: false,
				cellBorder: true,
				rowBorder: true,
				rowRounded: false,
				stripped: false,
				headerBorder: true,
				headerSticky: false,
				width: "fixed",
			},
		},
	},
	fullFeaturedTable: {
		name: "Full Featured Table",
		description: "A table with all features enabled",
		columns: [
			{
				id: "id",
				accessor: "id",
				label: "ID",
				type: "number",
				order: 1,
			},
			{
				id: "name",
				accessor: "name",
				label: "Name",
				type: "string",
				order: 2,
			},
			{
				id: "status",
				accessor: "status",
				label: "Status",
				type: "enum",
				order: 3,
				hasFacetedFilter: true,
				possibleValues: ["Active", "Inactive", "Pending"],
			},
			{
				id: "value",
				accessor: "value",
				label: "Value",
				type: "number",
				order: 4,
			},
		],
		sampleData: Array.from({ length: 20 }, (_, i) => ({
			id: i + 1,
			name: `Item ${i + 1}`,
			status: ["Active", "Inactive", "Pending"][i % 3],
			value: Math.floor(Math.random() * 1000),
		})),
		settings: {
			isGlobalSearch: true,
			enableHiding: true,
			enableSorting: true,
			enableResizing: true,
			enablePinning: true,
			enableRowSelection: true,
			enableCRUD: true,
			enableColumnDragging: true,
			enableRowDragging: false,
			enablePagination: true,
			enableColumnMovable: true,
			tableLayout: {
				dense: false,
				cellBorder: false,
				rowBorder: true,
				rowRounded: true,
				stripped: true,
				headerBorder: true,
				headerSticky: true,
				width: "fixed",
			},
		},
	},
	arrayTable: {
		name: "Table with Array Columns",
		description: "A table demonstrating array type columns",
		columns: [
			{
				id: "id",
				accessor: "id",
				label: "ID",
				type: "number",
				order: 1,
			},
			{
				id: "name",
				accessor: "name",
				label: "Name",
				type: "string",
				order: 2,
			},
			{
				id: "tags",
				accessor: "tags",
				label: "Tags",
				type: "array",
				order: 3,
			},
			{
				id: "scores",
				accessor: "scores",
				label: "Scores",
				type: "array",
				order: 4,
			},
		],
		sampleData: Array.from({ length: 10 }, (_, i) => ({
			id: i + 1,
			name: `Item ${i + 1}`,
			tags: ["tag1", "tag2", "tag3"].slice(0, (i % 3) + 1),
			scores: [
				Math.floor(Math.random() * 100),
				Math.floor(Math.random() * 100),
			],
		})),
		settings: {
			isGlobalSearch: true,
			enableHiding: false,
			enableSorting: true,
			enableResizing: false,
			enablePinning: false,
			enableRowSelection: false,
			enableCRUD: false,
			enableColumnDragging: false,
			enableRowDragging: false,
			enablePagination: true,
			enableColumnMovable: false,
			tableLayout: {
				dense: false,
				cellBorder: false,
				rowBorder: true,
				rowRounded: false,
				stripped: false,
				headerBorder: true,
				headerSticky: false,
				width: "fixed",
			},
		},
	},
};
