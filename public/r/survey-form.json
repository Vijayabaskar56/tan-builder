{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "survey-form",
  "type": "registry:block",
  "title": "Survey Form",
  "description": "A multi-step survey form.",
  "dependencies": [
    "@tanstack/react-form",
    "sonner",
    "zod",
    "motion"
  ],
  "registryDependencies": [
    "field",
    "input",
    "progress",
    "textarea",
    "toggle-group",
    "https://tancn.dev/r/tanstack-form.json"
  ],
  "files": [
    {
      "path": "registry/default/surve-formy.tsx",
      "content": "import { revalidateLogic } from \"@tanstack/react-form\";\nimport { AnimatePresence, motion } from \"motion/react\";\nimport { toast } from \"sonner\";\nimport * as z from \"zod\";\n\nimport { Input } from \"@/components/ui/input\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useAppForm, withFieldGroup } from \"@/components/ui/tanstack-form\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { ToggleGroup, ToggleGroupItem } from \"@/components/ui/toggle-group\";\nimport { useFormStepper } from \"@/hooks/use-stepper\";\n\nexport const surveyFormSchema = z.object({\n\tname: z.string().min(1, \"This field is required\"),\n\tlastName: z.string().min(1, \"This field is required\"),\n\tyourEmail: z.email(),\n\tphoneNumber: z.number(),\n\tpreferences: z.array(z.string().min(1, \"This field is required\")),\n\tcomment: z.string().min(1, \"This field is required\"),\n});\nexport const stepSchemas = [\n\t// Step 1\n\tsurveyFormSchema.pick({\n\t\tname: true,\n\t\tlastName: true,\n\t}),\n\t// Step 2\n\tsurveyFormSchema.pick({\n\t\tyourEmail: true,\n\t\tphoneNumber: true,\n\t}),\n\t// Step 3\n\tsurveyFormSchema.pick({\n\t\tpreferences: true,\n\t\tcomment: true,\n\t}),\n];\nconst Step1Group = withFieldGroup({\n\tdefaultValues: {\n\t\tname: \"\",\n\t\tlastName: \"\",\n\t},\n\trender: function Step1Render({ group }) {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<group.FieldLegend className=\"text-3xl font-bold\">\n\t\t\t\t\tPersonal Details\n\t\t\t\t</group.FieldLegend>\n\t\t\t\t<group.FieldDescription>\n\t\t\t\t\tPlease provide your personal details\n\t\t\t\t</group.FieldDescription>\n\t\t\t\t<group.FieldSeparator />\n\t\t\t\t<group.AppField name={\"name\"}>\n\t\t\t\t\t{(field) => (\n\t\t\t\t\t\t<field.FieldSet className=\"w-full\">\n\t\t\t\t\t\t\t<field.Field>\n\t\t\t\t\t\t\t\t<field.FieldLabel htmlFor={\"name\"}>\n\t\t\t\t\t\t\t\t\tFirst name *\n\t\t\t\t\t\t\t\t</field.FieldLabel>\n\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\tname={\"name\"}\n\t\t\t\t\t\t\t\t\tplaceholder=\"First name\"\n\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\tvalue={(field.state.value as string | undefined) ?? \"\"}\n\t\t\t\t\t\t\t\t\tonBlur={field.handleBlur}\n\t\t\t\t\t\t\t\t\tonChange={(e) => field.handleChange(e.target.value)}\n\t\t\t\t\t\t\t\t\taria-invalid={!!field.state.meta.errors.length}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</field.Field>\n\n\t\t\t\t\t\t\t<field.FieldError />\n\t\t\t\t\t\t</field.FieldSet>\n\t\t\t\t\t)}\n\t\t\t\t</group.AppField>\n\n\t\t\t\t<group.AppField name={\"lastName\"}>\n\t\t\t\t\t{(field) => (\n\t\t\t\t\t\t<field.FieldSet className=\"w-full\">\n\t\t\t\t\t\t\t<field.Field>\n\t\t\t\t\t\t\t\t<field.FieldLabel htmlFor={\"lastName\"}>\n\t\t\t\t\t\t\t\t\tLast name{\" \"}\n\t\t\t\t\t\t\t\t</field.FieldLabel>\n\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\tname={\"lastName\"}\n\t\t\t\t\t\t\t\t\tplaceholder=\"Last name\"\n\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\tvalue={(field.state.value as string | undefined) ?? \"\"}\n\t\t\t\t\t\t\t\t\tonBlur={field.handleBlur}\n\t\t\t\t\t\t\t\t\tonChange={(e) => field.handleChange(e.target.value)}\n\t\t\t\t\t\t\t\t\taria-invalid={!!field.state.meta.errors.length}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</field.Field>\n\n\t\t\t\t\t\t\t<field.FieldError />\n\t\t\t\t\t\t</field.FieldSet>\n\t\t\t\t\t)}\n\t\t\t\t</group.AppField>\n\t\t\t</div>\n\t\t);\n\t},\n});\nconst Step2Group = withFieldGroup({\n\tdefaultValues: {\n\t\tyourEmail: \"\",\n\t\tphoneNumber: 0,\n\t},\n\trender: function Step2Render({ group }) {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<group.FieldLegend className=\"text-3xl font-bold\">\n\t\t\t\t\tContact Information\n\t\t\t\t</group.FieldLegend>\n\t\t\t\t<group.FieldDescription>\n\t\t\t\t\tPlease provide your contact information\n\t\t\t\t</group.FieldDescription>\n\t\t\t\t<group.FieldSeparator />\n\t\t\t\t<group.AppField name={\"yourEmail\"}>\n\t\t\t\t\t{(field) => (\n\t\t\t\t\t\t<field.FieldSet className=\"w-full\">\n\t\t\t\t\t\t\t<field.Field>\n\t\t\t\t\t\t\t\t<field.FieldLabel htmlFor={\"yourEmail\"}>\n\t\t\t\t\t\t\t\t\tYour Email *\n\t\t\t\t\t\t\t\t</field.FieldLabel>\n\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\tname={\"yourEmail\"}\n\t\t\t\t\t\t\t\t\tplaceholder=\"Enter your email\"\n\t\t\t\t\t\t\t\t\ttype=\"email\"\n\t\t\t\t\t\t\t\t\tvalue={(field.state.value as string | undefined) ?? \"\"}\n\t\t\t\t\t\t\t\t\tonBlur={field.handleBlur}\n\t\t\t\t\t\t\t\t\tonChange={(e) => field.handleChange(e.target.value)}\n\t\t\t\t\t\t\t\t\taria-invalid={!!field.state.meta.errors.length}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</field.Field>\n\n\t\t\t\t\t\t\t<field.FieldError />\n\t\t\t\t\t\t</field.FieldSet>\n\t\t\t\t\t)}\n\t\t\t\t</group.AppField>\n\n\t\t\t\t<group.AppField name={\"phoneNumber\"}>\n\t\t\t\t\t{(field) => (\n\t\t\t\t\t\t<field.FieldSet className=\"w-full\">\n\t\t\t\t\t\t\t<field.Field>\n\t\t\t\t\t\t\t\t<field.FieldLabel htmlFor={\"phoneNumber\"}>\n\t\t\t\t\t\t\t\t\tPhone Number{\" \"}\n\t\t\t\t\t\t\t\t</field.FieldLabel>\n\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\tname={\"phoneNumber\"}\n\t\t\t\t\t\t\t\t\tplaceholder=\"Enter your phone number\"\n\t\t\t\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\t\t\t\tinputMode=\"decimal\"\n\t\t\t\t\t\t\t\t\tvalue={field.state.value}\n\t\t\t\t\t\t\t\t\tonBlur={field.handleBlur}\n\t\t\t\t\t\t\t\t\tonChange={(e) => field.handleChange(e.target.valueAsNumber)}\n\t\t\t\t\t\t\t\t\taria-invalid={!!field.state.meta.errors.length}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</field.Field>\n\n\t\t\t\t\t\t\t<field.FieldError />\n\t\t\t\t\t\t</field.FieldSet>\n\t\t\t\t\t)}\n\t\t\t\t</group.AppField>\n\t\t\t</div>\n\t\t);\n\t},\n});\nconst Step3Group = withFieldGroup({\n\tdefaultValues: {\n\t\tpreferences: [] as string[],\n\t\tcomment: \"\",\n\t},\n\trender: function Step3Render({ group }) {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<group.FieldLegend className=\"text-3xl font-bold\">\n\t\t\t\t\tYour Preferences\n\t\t\t\t</group.FieldLegend>\n\t\t\t\t<group.FieldDescription>\n\t\t\t\t\tTell us about your interests and preferences.\n\t\t\t\t</group.FieldDescription>\n\t\t\t\t<group.FieldSeparator />\n\t\t\t\t<group.AppField name={\"preferences\"}>\n\t\t\t\t\t{(field) => {\n\t\t\t\t\t\tconst options = [\n\t\t\t\t\t\t\t{ label: \"Technology\", value: \"technology\" },\n\t\t\t\t\t\t\t{ label: \"Business\", value: \"Business\" },\n\t\t\t\t\t\t\t{ label: \"Health\", value: \"Health\" },\n\t\t\t\t\t\t\t{ label: \"Science\", value: \"Science\" },\n\t\t\t\t\t\t];\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<field.FieldSet className=\"flex flex-col gap-2 w-full py-1\">\n\t\t\t\t\t\t\t\t<field.Field>\n\t\t\t\t\t\t\t\t\t<field.FieldLabel className=\"mt-0\" htmlFor={\"preferences\"}>\n\t\t\t\t\t\t\t\t\t\tPreferences *\n\t\t\t\t\t\t\t\t\t</field.FieldLabel>\n\n\t\t\t\t\t\t\t\t\t<ToggleGroup\n\t\t\t\t\t\t\t\t\t\ttype=\"multiple\"\n\t\t\t\t\t\t\t\t\t\tvariant=\"outline\"\n\t\t\t\t\t\t\t\t\t\tonValueChange={field.handleChange}\n\t\t\t\t\t\t\t\t\t\tclassName=\"flex justify-start items-center w-full\"\n\t\t\t\t\t\t\t\t\t\taria-invalid={!!field.state.meta.errors.length}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{options.map(({ label, value }) => (\n\t\t\t\t\t\t\t\t\t\t\t<ToggleGroupItem\n\t\t\t\t\t\t\t\t\t\t\t\tname={\"preferences\"}\n\t\t\t\t\t\t\t\t\t\t\t\tvalue={value}\n\t\t\t\t\t\t\t\t\t\t\t\tkey={value}\n\t\t\t\t\t\t\t\t\t\t\t\tdisabled={false}\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-x-2 px-1\"\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t{label}\n\t\t\t\t\t\t\t\t\t\t\t</ToggleGroupItem>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t</ToggleGroup>\n\t\t\t\t\t\t\t\t</field.Field>\n\n\t\t\t\t\t\t\t\t<field.FieldError />\n\t\t\t\t\t\t\t</field.FieldSet>\n\t\t\t\t\t\t);\n\t\t\t\t\t}}\n\t\t\t\t</group.AppField>\n\n\t\t\t\t<group.AppField name={\"comment\"}>\n\t\t\t\t\t{(field) => (\n\t\t\t\t\t\t<field.FieldSet className=\"w-full\">\n\t\t\t\t\t\t\t<field.Field>\n\t\t\t\t\t\t\t\t<field.FieldLabel htmlFor={\"comment\"}>\n\t\t\t\t\t\t\t\t\tFeedback Comment{\" \"}\n\t\t\t\t\t\t\t\t</field.FieldLabel>\n\t\t\t\t\t\t\t\t<Textarea\n\t\t\t\t\t\t\t\t\tplaceholder=\"Share your feedback\"\n\t\t\t\t\t\t\t\t\trequired={false}\n\t\t\t\t\t\t\t\t\tdisabled={false}\n\t\t\t\t\t\t\t\t\tvalue={(field.state.value as string | undefined) ?? \"\"}\n\t\t\t\t\t\t\t\t\tname={\"comment\"}\n\t\t\t\t\t\t\t\t\tonChange={(e) => field.handleChange(e.target.value)}\n\t\t\t\t\t\t\t\t\tonBlur={field.handleBlur}\n\t\t\t\t\t\t\t\t\tclassName=\"resize-none\"\n\t\t\t\t\t\t\t\t\taria-invalid={!!field.state.meta.errors.length}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</field.Field>\n\t\t\t\t\t\t\t<field.FieldError />\n\t\t\t\t\t\t</field.FieldSet>\n\t\t\t\t\t)}\n\t\t\t\t</group.AppField>\n\t\t\t</div>\n\t\t);\n\t},\n});\nexport function SurveyForm() {\n\tconst {\n\t\tcurrentValidator,\n\t\tstep,\n\t\tcurrentStep,\n\t\tisFirstStep,\n\t\thandleCancelOrBack,\n\t\thandleNextStepOrSubmit,\n\t} = useFormStepper(stepSchemas);\n\tconst surveyForm = useAppForm({\n\t\tdefaultValues: {\n\t\t\tname: \"\",\n\t\t\tlastName: \"\",\n\t\t\tyourEmail: \"\",\n\t\t\tphoneNumber: 0,\n\t\t\tpreferences: [] as string[],\n\t\t\tcomment: \"\",\n\t\t} as z.input<typeof surveyFormSchema>,\n\t\tvalidationLogic: revalidateLogic(),\n\t\tvalidators: {\n\t\t\tonDynamic: currentValidator as typeof surveyFormSchema,\n\t\t\tonDynamicAsyncDebounceMs: 300,\n\t\t},\n\t\tonSubmit: ({ value }) => {\n\t\t\ttoast.success(\"Submitted Successfully\");\n\t\t},\n\t});\n\tconst groups: Record<number, React.ReactNode> = {\n\t\t1: (\n\t\t\t<Step1Group\n\t\t\t\tform={surveyForm}\n\t\t\t\tfields={{ name: \"name\", lastName: \"lastName\" }}\n\t\t\t/>\n\t\t),\n\t\t2: (\n\t\t\t<Step2Group\n\t\t\t\tform={surveyForm}\n\t\t\t\tfields={{ yourEmail: \"yourEmail\", phoneNumber: \"phoneNumber\" }}\n\t\t\t/>\n\t\t),\n\t\t3: (\n\t\t\t<Step3Group\n\t\t\t\tform={surveyForm}\n\t\t\t\tfields={{ preferences: \"preferences\", comment: \"comment\" }}\n\t\t\t/>\n\t\t),\n\t};\n\tconst handleNext = async () => {\n\t\tawait handleNextStepOrSubmit(surveyForm);\n\t};\n\tconst handlePrevious = () => {\n\t\thandleCancelOrBack({\n\t\t\tonBack: () => {},\n\t\t});\n\t};\n\tconst current = groups[currentStep];\n\treturn (\n\t\t<div>\n\t\t\t<surveyForm.AppForm>\n\t\t\t\t<surveyForm.Form>\n\t\t\t\t\t<surveyForm.FieldLegend>Survey Form</surveyForm.FieldLegend>\n\t\t\t\t\t<surveyForm.FieldDescription>\n\t\t\t\t\t\tMulti-Step Form Examples\n\t\t\t\t\t</surveyForm.FieldDescription>\n\t\t\t\t\t<surveyForm.FieldSeparator />\n\t\t\t\t\t<div className=\"flex flex-col gap-2 pt-3\">\n\t\t\t\t\t\t<div className=\"flex flex-col items-center justify-start gap-1\">\n\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\tStep {currentStep} of {Object.keys(groups).length}\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t<Progress\n\t\t\t\t\t\t\t\tvalue={(currentStep / Object.keys(groups).length) * 100}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<AnimatePresence mode=\"popLayout\">\n\t\t\t\t\t\t\t<motion.div\n\t\t\t\t\t\t\t\tkey={currentStep}\n\t\t\t\t\t\t\t\tinitial={{ opacity: 0, x: 15 }}\n\t\t\t\t\t\t\t\tanimate={{ opacity: 1, x: 0 }}\n\t\t\t\t\t\t\t\texit={{ opacity: 0, x: -15 }}\n\t\t\t\t\t\t\t\ttransition={{ duration: 0.4, type: \"spring\" }}\n\t\t\t\t\t\t\t\tclassName=\"flex flex-col gap-2\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{current}\n\t\t\t\t\t\t\t</motion.div>\n\t\t\t\t\t\t</AnimatePresence>\n\t\t\t\t\t\t<div className=\"flex items-center justify-between gap-3 w-full pt-3\">\n\t\t\t\t\t\t\t<surveyForm.StepButton\n\t\t\t\t\t\t\t\tlabel=\"Previous\"\n\t\t\t\t\t\t\t\tdisabled={isFirstStep}\n\t\t\t\t\t\t\t\thandleMovement={() =>\n\t\t\t\t\t\t\t\t\thandleCancelOrBack({\n\t\t\t\t\t\t\t\t\t\tonBack: () => handlePrevious(),\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t{step.isCompleted ? (\n\t\t\t\t\t\t\t\t<surveyForm.SubmitButton\n\t\t\t\t\t\t\t\t\tlabel=\"Submit\"\n\t\t\t\t\t\t\t\t\tonClick={() => handleNextStepOrSubmit(surveyForm)}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<surveyForm.StepButton\n\t\t\t\t\t\t\t\t\tlabel=\"Next\"\n\t\t\t\t\t\t\t\t\thandleMovement={handleNext}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</surveyForm.Form>\n\t\t\t</surveyForm.AppForm>\n\t\t</div>\n\t);\n}\n",
      "type": "registry:component"
    }
  ]
}