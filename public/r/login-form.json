{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "login-form",
  "type": "registry:block",
  "title": "Login Form",
  "description": "A login form with email and password.",
  "dependencies": [
    "@tanstack/react-form",
    "sonner",
    "zod",
    "lucide-react"
  ],
  "registryDependencies": [
    "field",
    "input",
    "https://tan-form-builder.baskar.dev/r/tanstack-form.json"
  ],
  "files": [
    {
      "path": "registry/default/login-form.tsx",
      "content": "import { revalidateLogic } from \"@tanstack/react-form\";\nimport { EyeIcon, EyeOffIcon } from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport * as z from \"zod\";\n\nimport { Input } from \"@/components/ui/input\";\nimport { useAppForm } from \"@/components/ui/tanstack-form\";\n\nconst loginFormSchema = z.object({\n\temail: z.email().optional(),\n\tpassword: z.string().min(1, \"This field is required\"),\n});\n\nexport function LoginForm() {\n\tconst loginForm = useAppForm({\n\t\tdefaultValues: {\n\t\t\temail: \"\",\n\t\t\tpassword: \"\",\n\t\t} as z.input<typeof loginFormSchema>,\n\t\tvalidationLogic: revalidateLogic(),\n\t\tvalidators: {\n\t\t\tonDynamic: loginFormSchema,\n\t\t\tonDynamicAsyncDebounceMs: 300,\n\t\t},\n\t\tonSubmit: ({}) => {\n\t\t\ttoast.success(\"success\");\n\t\t},\n\t\tonSubmitInvalid({ formApi }) {\n\t\t\tconst errorMap = formApi.state.errorMap[\"onDynamic\"]!;\n\t\t\tconst inputs = Array.from(\n\t\t\t\tdocument.querySelectorAll(\"#previewForm input\"),\n\t\t\t) as HTMLInputElement[];\n\t\t\tlet firstInput: HTMLInputElement | undefined;\n\t\t\tfor (const input of inputs) {\n\t\t\t\tif (errorMap[input.name]) {\n\t\t\t\t\tfirstInput = input;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfirstInput?.focus();\n\t\t},\n\t});\n\treturn (\n\t\t<div>\n\t\t\t\t<loginForm.AppForm>\n\t\t\t\t<loginForm.Form>\n\t\t\t\t\t<loginForm.FieldLegend className=\"text-3xl font-bold\">\n\t\t\t\t\t\tLogin\n\t\t\t\t\t</loginForm.FieldLegend>\n\t\t\t\t\t<loginForm.FieldDescription>\n\t\t\t\t\t\tLogin to create an account\n\t\t\t\t\t</loginForm.FieldDescription>\n\t\t\t\t\t<loginForm.FieldSeparator />\n\t\t\t\t\t<loginForm.AppField name={\"email\"}>\n\t\t\t\t\t\t{(field) => (\n\t\t\t\t\t\t\t<field.FieldSet className=\"w-full\">\n\t\t\t\t\t\t\t\t<field.Field>\n\t\t\t\t\t\t\t\t\t<field.FieldLabel htmlFor={\"email\"}>Email </field.FieldLabel>\n\t\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\t\tname={\"email\"}\n\t\t\t\t\t\t\t\t\t\tplaceholder=\"Enter your Email\"\n\t\t\t\t\t\t\t\t\t\ttype=\"email\"\n\t\t\t\t\t\t\t\t\t\tvalue={(field.state.value as string | undefined) ?? \"\"}\n\t\t\t\t\t\t\t\t\t\tonBlur={field.handleBlur}\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => field.handleChange(e.target.value)}\n\t\t\t\t\t\t\t\t\t\taria-invalid={!!field.state.meta.errors.length}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</field.Field>\n\n\t\t\t\t\t\t\t\t<field.FieldError />\n\t\t\t\t\t\t\t</field.FieldSet>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</loginForm.AppField>\n\t\t\t\t\t<loginForm.AppField name={\"password\"}>\n\t\t\t\t\t\t{(field) => (\n\t\t\t\t\t\t\t<field.FieldSet className=\"w-full\">\n\t\t\t\t\t\t\t\t<field.FieldLabel htmlFor={\"password\"}>\n\t\t\t\t\t\t\t\t\tPassword *\n\t\t\t\t\t\t\t\t</field.FieldLabel>\n\t\t\t\t\t\t\t\t<field.Field orientation=\"horizontal\">\n\t\t\t\t\t\t\t\t\t<field.InputGroup>\n\t\t\t\t\t\t\t\t\t\t<field.InputGroupInput\n\t\t\t\t\t\t\t\t\t\t\tid={\"password\"}\n\t\t\t\t\t\t\t\t\t\t\tname={\"password\"}\n\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Password\"\n\t\t\t\t\t\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\t\t\t\t\t\tvalue={(field.state.value as string | undefined) ?? \"\"}\n\t\t\t\t\t\t\t\t\t\t\tonBlur={field.handleBlur}\n\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => field.handleChange(e.target.value)}\n\t\t\t\t\t\t\t\t\t\t\taria-invalid={!!field.state.meta.errors.length}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t<field.InputGroupAddon align=\"inline-end\">\n\t\t\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer flex items-center justify-center p-1 hover:bg-gray-100 rounded transition-colors\"\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tconst input =\n\t\t\t\t\t\t\t\t\t\t\t\t\t\te.currentTarget.parentElement?.parentElement?.querySelector(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"input\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t) as HTMLInputElement;\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (input) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tinput.type =\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tinput.type === \"password\" ? \"text\" : \"password\";\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst button = e.currentTarget;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbutton.setAttribute(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"data-show\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tinput.type === \"text\" ? \"true\" : \"false\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\tdata-show=\"false\"\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t<EyeIcon className=\"size-3 data-[show=true]:hidden\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<EyeOffIcon className=\"size-3 hidden data-[show=true]:block\" />\n\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t</field.InputGroupAddon>\n\t\t\t\t\t\t\t\t\t</field.InputGroup>\n\t\t\t\t\t\t\t\t</field.Field>\n\n\t\t\t\t\t\t\t\t<field.FieldError />\n\t\t\t\t\t\t\t</field.FieldSet>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</loginForm.AppField>\n\t\t\t\t\t<div className=\"flex justify-end items-center w-full pt-3\">\n\t\t\t\t\t\t<loginForm.SubmitButton label=\"Submit\" />\n\t\t\t\t\t</div>\n\t\t\t\t</loginForm.Form>\n\t\t\t</loginForm.AppForm>\n\t\t</div>\n\t);\n}\n",
      "type": "registry:component"
    }
  ]
}