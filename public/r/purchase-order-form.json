{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "purchase-order-form",
  "type": "registry:block",
  "title": "Purchase Order Form",
  "description": "A purchase order form with multiple items.",
  "dependencies": [
    "@tanstack/react-form",
    "sonner",
    "zod",
    "lucide-react"
  ],
  "registryDependencies": [
    "field",
    "separator",
    "input",
    "button",
    "slider",
    "https://tan-form-builder.baskar.dev/r/tanstack-form.json"
  ],
  "files": [
    {
      "path": "registry/default/purchase-order-form.tsx",
      "content": "import { revalidateLogic } from \"@tanstack/react-form\";\nimport { Plus, Trash2 } from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport * as z from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n\tFieldDescription,\n\tFieldLegend,\n\tFieldSeparator,\n} from \"@/components/ui/field\";\nimport { Input } from \"@/components/ui/input\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { useAppForm } from \"@/components/ui/tanstack-form\";\n\nexport const purchaseOrderForm = z.object({\n\torderNumber: z.string().min(1, \"This field is required\"),\n\tcustomerName: z.string().min(1, \"This field is required\"),\n\titems: z.array(\n\t\tz.object({\n\t\t\titemName: z.string().min(1, \"This field is required\"),\n\t\t\tquantity: z\n\t\t\t\t.number()\n\t\t\t\t.min(1, \"Must be at least 1\")\n\t\t\t\t.max(50, \"Must be at most 50\"),\n\t\t}),\n\t),\n});\n\nexport function PurchaseOrderForm() {\n\tconst orderForm = useAppForm({\n\t\tdefaultValues: {\n\t\t\torderNumber: \"\",\n\t\t\tcustomerName: \"\",\n\t\t\titems: [\n\t\t\t\t{\n\t\t\t\t\titemName: \"\",\n\t\t\t\t\tquantity: 1,\n\t\t\t\t},\n\t\t\t],\n\t\t} as z.input<typeof purchaseOrderForm>,\n\t\tvalidationLogic: revalidateLogic(),\n\t\tvalidators: {\n\t\t\tonDynamic: purchaseOrderForm,\n\t\t\tonDynamicAsyncDebounceMs: 300,\n\t\t},\n\t\tonSubmit: ({ value }) => {\n\t\t\ttoast.success(\"success\");\n\t\t},\n\t\tonSubmitInvalid({ formApi }) {\n\t\t\tconst errorMap = formApi.state.errorMap[\"onDynamic\"]!;\n\t\t\tconst inputs = Array.from(\n\t\t\t\tdocument.querySelectorAll(\"#previewForm input\"),\n\t\t\t) as HTMLInputElement[];\n\t\t\tlet firstInput: HTMLInputElement | undefined;\n\t\t\tfor (const input of inputs) {\n\t\t\t\tif (errorMap[input.name]) {\n\t\t\t\t\tfirstInput = input;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfirstInput?.focus();\n\t\t},\n\t});\n\treturn (\n\t\t<div>\n\t\t\t<orderForm.AppForm>\n\t\t\t\t<orderForm.Form>\n\t\t\t\t\t<FieldLegend>Purchase Order</FieldLegend>\n\t\t\t\t\t<FieldDescription>\n\t\t\t\t\t\tCreate a purchase order with multiple items\n\t\t\t\t\t</FieldDescription>\n\t\t\t\t\t<FieldSeparator />\n\t\t\t\t\t<orderForm.AppField name={\"orderNumber\"}>\n\t\t\t\t\t\t{(field) => (\n\t\t\t\t\t\t\t<field.FieldSet className=\"w-full\">\n\t\t\t\t\t\t\t\t<field.Field>\n\t\t\t\t\t\t\t\t\t<field.FieldLabel htmlFor={\"orderNumber\"}>\n\t\t\t\t\t\t\t\t\t\tOrder Number *\n\t\t\t\t\t\t\t\t\t</field.FieldLabel>\n\t\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\t\tname={\"orderNumber\"}\n\t\t\t\t\t\t\t\t\t\tplaceholder=\"Enter order number\"\n\t\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\t\tvalue={(field.state.value as string | undefined) ?? \"\"}\n\t\t\t\t\t\t\t\t\t\tonBlur={field.handleBlur}\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => field.handleChange(e.target.value)}\n\t\t\t\t\t\t\t\t\t\taria-invalid={!!field.state.meta.errors.length}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</field.Field>\n\n\t\t\t\t\t\t\t\t<field.FieldError />\n\t\t\t\t\t\t\t</field.FieldSet>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</orderForm.AppField>\n\t\t\t\t\t<orderForm.AppField name={\"customerName\"}>\n\t\t\t\t\t\t{(field) => (\n\t\t\t\t\t\t\t<field.FieldSet className=\"w-full\">\n\t\t\t\t\t\t\t\t<field.Field>\n\t\t\t\t\t\t\t\t\t<field.FieldLabel htmlFor={\"customerName\"}>\n\t\t\t\t\t\t\t\t\t\tCustomer Name *\n\t\t\t\t\t\t\t\t\t</field.FieldLabel>\n\t\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\t\tname={\"customerName\"}\n\t\t\t\t\t\t\t\t\t\tplaceholder=\"Enter your text\"\n\t\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\t\tvalue={(field.state.value as string | undefined) ?? \"\"}\n\t\t\t\t\t\t\t\t\t\tonBlur={field.handleBlur}\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => field.handleChange(e.target.value)}\n\t\t\t\t\t\t\t\t\t\taria-invalid={!!field.state.meta.errors.length}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</field.Field>\n\n\t\t\t\t\t\t\t\t<field.FieldError />\n\t\t\t\t\t\t\t</field.FieldSet>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</orderForm.AppField>\n\t\t\t\t\t{orderForm.AppField({\n\t\t\t\t\t\tname: \"items\",\n\t\t\t\t\t\tmode: \"array\",\n\t\t\t\t\t\tchildren: (field) => (\n\t\t\t\t\t\t\t<div className=\"w-full space-y-4\">\n\t\t\t\t\t\t\t\t{field.state.value.map((_, index) => (\n\t\t\t\t\t\t\t\t\t<div key={index} className=\"space-y-3 p-4 relative\">\n\t\t\t\t\t\t\t\t\t\t<Separator />\n\t\t\t\t\t\t\t\t\t\t<orderForm.AppField name={`items[${index}].itemName`}>\n\t\t\t\t\t\t\t\t\t\t\t{(field) => (\n\t\t\t\t\t\t\t\t\t\t\t\t<field.FieldSet className=\"w-full\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<field.Field>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<field.FieldLabel\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thtmlFor={`items[${index}].itemName`}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tItem Name *\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</field.FieldLabel>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname={`items[${index}].itemName`}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Enter item name\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(field.state.value as string | undefined) ?? \"\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonBlur={field.handleBlur}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfield.handleChange(e.target.value)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\taria-invalid={!!field.state.meta.errors.length}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</field.Field>\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t<field.FieldError />\n\t\t\t\t\t\t\t\t\t\t\t\t</field.FieldSet>\n\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t</orderForm.AppField>\n\n\t\t\t\t\t\t\t\t\t\t<orderForm.AppField name={`items[${index}].quantity`}>\n\t\t\t\t\t\t\t\t\t\t\t{(field) => {\n\t\t\t\t\t\t\t\t\t\t\t\tconst min = 1;\n\t\t\t\t\t\t\t\t\t\t\t\tconst max = 50;\n\t\t\t\t\t\t\t\t\t\t\t\tconst step = 3;\n\t\t\t\t\t\t\t\t\t\t\t\tconst defaultSliderValue = min;\n\t\t\t\t\t\t\t\t\t\t\t\tconst currentValue = field.state.value;\n\t\t\t\t\t\t\t\t\t\t\t\tconst sliderValue = Array.isArray(currentValue)\n\t\t\t\t\t\t\t\t\t\t\t\t\t? currentValue\n\t\t\t\t\t\t\t\t\t\t\t\t\t: [currentValue || defaultSliderValue];\n\n\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<field.FieldSet className=\"w-full\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<field.Field>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<field.FieldLabel\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"flex justify-between items-center\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thtmlFor={`items[${index}].quantity`}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tQuantity *\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"text-sm text-muted-foreground\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{sliderValue[0] || min} / {max}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</field.FieldLabel>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Slider\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname={`items[${index}].quantity`}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmin={min}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmax={max}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdisabled={false}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstep={step}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={sliderValue}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\taria-invalid={!!field.state.meta.errors.length}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonValueChange={(newValue) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfield.handleChange(newValue[0]);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfield.handleBlur();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</field.Field>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<field.FieldDescription className=\"py-1\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAdjust the range by sliding.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</field.FieldDescription>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<field.FieldError />\n\t\t\t\t\t\t\t\t\t\t\t\t\t</field.FieldSet>\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t</orderForm.AppField>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t<div className=\"flex justify-between pt-2\">\n\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\tvariant=\"outline\"\n\t\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\t\t\t\t\tfield.pushValue(\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\titemName: \"\",\n\t\t\t\t\t\t\t\t\t\t\t\t\tquantity: 1,\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t{ dontValidate: true },\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<Plus className=\"h-4 w-4 mr-2\" /> Add\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\tvariant=\"outline\"\n\t\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\t\t\t\t\tfield.removeValue(field.state.value.length - 1)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tdisabled={field.state.value.length <= 1}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<Trash2 className=\"h-4 w-4 mr-2\" /> Remove\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t),\n\t\t\t\t\t})}\n\t\t\t\t\t<div className=\"flex justify-end items-center w-full pt-3\">\n\t\t\t\t\t\t<orderForm.SubmitButton label=\"Submit\" />\n\t\t\t\t\t</div>\n\t\t\t\t</orderForm.Form>\n\t\t\t</orderForm.AppForm>\n\t\t</div>\n\t);\n}\n",
      "type": "registry:component"
    }
  ]
}