{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "event-registration-form",
  "type": "registry:block",
  "title": "Event Registration Form",
  "description": "A form for registering for events.",
  "dependencies": [
    "@tanstack/react-form",
    "sonner",
    "zod"
  ],
  "registryDependencies": [
    "field",
    "input",
    "label",
    "radio-group",
    "textarea"
  ],
  "files": [
    {
      "path": "registry/default/eventRegistration-form.tsx",
      "content": "import { revalidateLogic } from \"@tanstack/react-form\";\nimport { toast } from \"sonner\";\nimport * as z from \"zod\";\n\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { useAppForm } from \"@/components/ui/tanstack-form\";\nimport { Textarea } from \"@/components/ui/textarea\";\n\nexport const eventRegistrationFormSchema = z.object({\n\tfirstName: z.string().min(1, \"This field is required\"),\n\tlastName: z.string().min(1, \"This field is required\"),\n\temail: z.email(),\n\tcompany: z.string().min(1, \"This field is required\").optional(),\n\tticketType: z.string().min(1, \"This field is required\"),\n\tcomments: z.string().min(1, \"This field is required\").optional(),\n});\n\nexport function EventRegistrationForm() {\n\tconst eventRegistrationForm = useAppForm({\n\t\tdefaultValues: {\n\t\t\tfirstName: \"\",\n\t\t\tlastName: \"\",\n\t\t\temail: \"\",\n\t\t\tcompany: \"\",\n\t\t\tticketType: \"general\",\n\t\t\tcomments: \"\",\n\t\t} as z.input<typeof eventRegistrationFormSchema>,\n\t\tvalidationLogic: revalidateLogic(),\n\t\tvalidators: {\n\t\t\tonDynamic: eventRegistrationFormSchema,\n\t\t\tonDynamicAsyncDebounceMs: 300,\n\t\t},\n\t\tonSubmit: ({ value }) => {\n\t\t\ttoast.success(\"success\");\n\t\t},\n\t\tonSubmitInvalid({ formApi }) {\n\t\t\tconst errorMap = formApi.state.errorMap[\"onDynamic\"]!;\n\t\t\tconst inputs = Array.from(\n\t\t\t\tdocument.querySelectorAll(\"#previewForm input\"),\n\t\t\t) as HTMLInputElement[];\n\t\t\tlet firstInput: HTMLInputElement | undefined;\n\t\t\tfor (const input of inputs) {\n\t\t\t\tif (errorMap[input.name]) {\n\t\t\t\t\tfirstInput = input;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfirstInput?.focus();\n\t\t},\n\t});\n\treturn (\n\t\t<div>\n\t\t\t<eventRegistrationForm.AppForm>\n\t\t\t\t<eventRegistrationForm.Form>\n\t\t\t\t\t<eventRegistrationForm.FieldLegend className=\"text-3xl font-bold\">\n\t\t\t\t\t\tEvent Registration\n\t\t\t\t\t</eventRegistrationForm.FieldLegend>\n\t\t\t\t\t<eventRegistrationForm.FieldDescription>\n\t\t\t\t\t\tRegister for our upcoming event\n\t\t\t\t\t</eventRegistrationForm.FieldDescription>\n\t\t\t\t\t<eventRegistrationForm.FieldSeparator />\n\t\t\t\t\t<div className=\"flex items-center justify-between flex-wrap sm:flex-nowrap w-full gap-2\">\n\t\t\t\t\t\t<eventRegistrationForm.AppField name={\"firstName\"}>\n\t\t\t\t\t\t\t{(field) => (\n\t\t\t\t\t\t\t\t<field.FieldSet className=\"w-full\">\n\t\t\t\t\t\t\t\t\t<field.Field>\n\t\t\t\t\t\t\t\t\t\t<field.FieldLabel htmlFor={\"firstName\"}>\n\t\t\t\t\t\t\t\t\t\t\tFirst Name *\n\t\t\t\t\t\t\t\t\t\t</field.FieldLabel>\n\t\t\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\t\t\tname={\"firstName\"}\n\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Enter your first name\"\n\t\t\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\t\t\tvalue={(field.state.value as string | undefined) ?? \"\"}\n\t\t\t\t\t\t\t\t\t\t\tonBlur={field.handleBlur}\n\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => field.handleChange(e.target.value)}\n\t\t\t\t\t\t\t\t\t\t\taria-invalid={!!field.state.meta.errors.length}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</field.Field>\n\n\t\t\t\t\t\t\t\t\t<field.FieldError />\n\t\t\t\t\t\t\t\t</field.FieldSet>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</eventRegistrationForm.AppField>\n\t\t\t\t\t\t<eventRegistrationForm.AppField name={\"lastName\"}>\n\t\t\t\t\t\t\t{(field) => (\n\t\t\t\t\t\t\t\t<field.FieldSet className=\"w-full\">\n\t\t\t\t\t\t\t\t\t<field.Field>\n\t\t\t\t\t\t\t\t\t\t<field.FieldLabel htmlFor={\"lastName\"}>\n\t\t\t\t\t\t\t\t\t\t\tLast Name *\n\t\t\t\t\t\t\t\t\t\t</field.FieldLabel>\n\t\t\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\t\t\tname={\"lastName\"}\n\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Enter your last name\"\n\t\t\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\t\t\tvalue={(field.state.value as string | undefined) ?? \"\"}\n\t\t\t\t\t\t\t\t\t\t\tonBlur={field.handleBlur}\n\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => field.handleChange(e.target.value)}\n\t\t\t\t\t\t\t\t\t\t\taria-invalid={!!field.state.meta.errors.length}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</field.Field>\n\n\t\t\t\t\t\t\t\t\t<field.FieldError />\n\t\t\t\t\t\t\t\t</field.FieldSet>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</eventRegistrationForm.AppField>\n\t\t\t\t\t</div>\n\t\t\t\t\t<eventRegistrationForm.AppField name={\"email\"}>\n\t\t\t\t\t\t{(field) => (\n\t\t\t\t\t\t\t<field.FieldSet className=\"w-full\">\n\t\t\t\t\t\t\t\t<field.Field>\n\t\t\t\t\t\t\t\t\t<field.FieldLabel htmlFor={\"email\"}>\n\t\t\t\t\t\t\t\t\t\tEmail Address *\n\t\t\t\t\t\t\t\t\t</field.FieldLabel>\n\t\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\t\tname={\"email\"}\n\t\t\t\t\t\t\t\t\t\tplaceholder=\"Enter your email address\"\n\t\t\t\t\t\t\t\t\t\ttype=\"email\"\n\t\t\t\t\t\t\t\t\t\tvalue={(field.state.value as string | undefined) ?? \"\"}\n\t\t\t\t\t\t\t\t\t\tonBlur={field.handleBlur}\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => field.handleChange(e.target.value)}\n\t\t\t\t\t\t\t\t\t\taria-invalid={!!field.state.meta.errors.length}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</field.Field>\n\n\t\t\t\t\t\t\t\t<field.FieldError />\n\t\t\t\t\t\t\t</field.FieldSet>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</eventRegistrationForm.AppField>\n\t\t\t\t\t<eventRegistrationForm.AppField name={\"company\"}>\n\t\t\t\t\t\t{(field) => (\n\t\t\t\t\t\t\t<field.FieldSet className=\"w-full\">\n\t\t\t\t\t\t\t\t<field.Field>\n\t\t\t\t\t\t\t\t\t<field.FieldLabel htmlFor={\"company\"}>\n\t\t\t\t\t\t\t\t\t\tCompany/Organization{\" \"}\n\t\t\t\t\t\t\t\t\t</field.FieldLabel>\n\t\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\t\tname={\"company\"}\n\t\t\t\t\t\t\t\t\t\tplaceholder=\"Enter your company name\"\n\t\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\t\tvalue={(field.state.value as string | undefined) ?? \"\"}\n\t\t\t\t\t\t\t\t\t\tonBlur={field.handleBlur}\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => field.handleChange(e.target.value)}\n\t\t\t\t\t\t\t\t\t\taria-invalid={!!field.state.meta.errors.length}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</field.Field>\n\n\t\t\t\t\t\t\t\t<field.FieldError />\n\t\t\t\t\t\t\t</field.FieldSet>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</eventRegistrationForm.AppField>\n\t\t\t\t\t<eventRegistrationForm.AppField name={\"ticketType\"}>\n\t\t\t\t\t\t{(field) => {\n\t\t\t\t\t\t\tconst options = [\n\t\t\t\t\t\t\t\t{ label: \"General Admission - Free\", value: \"general\" },\n\t\t\t\t\t\t\t\t{ label: \"VIP Access - $99\", value: \"vip\" },\n\t\t\t\t\t\t\t\t{ label: \"Premium Package - $199\", value: \"premium\" },\n\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<field.FieldSet className=\"flex flex-col gap-2 w-full py-1\">\n\t\t\t\t\t\t\t\t\t<field.FieldLabel className=\"mt-0\" htmlFor={\"ticketType\"}>\n\t\t\t\t\t\t\t\t\t\tTicket Type *\n\t\t\t\t\t\t\t\t\t</field.FieldLabel>\n\n\t\t\t\t\t\t\t\t\t<field.Field>\n\t\t\t\t\t\t\t\t\t\t<RadioGroup\n\t\t\t\t\t\t\t\t\t\t\tonValueChange={field.handleChange}\n\t\t\t\t\t\t\t\t\t\t\tname={\"ticketType\"}\n\t\t\t\t\t\t\t\t\t\t\tvalue={(field.state.value as string | undefined) ?? \"\"}\n\t\t\t\t\t\t\t\t\t\t\tdisabled={false}\n\t\t\t\t\t\t\t\t\t\t\taria-invalid={!!field.state.meta.errors.length}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t{options.map(({ label, value }) => (\n\t\t\t\t\t\t\t\t\t\t\t\t<div key={value} className=\"flex items-center gap-x-2\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<RadioGroupItem\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={value}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tid={value}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trequired={true}\n\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Label htmlFor={value}>{label}</Label>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t</RadioGroup>\n\t\t\t\t\t\t\t\t\t</field.Field>\n\t\t\t\t\t\t\t\t\t<field.FieldError />\n\t\t\t\t\t\t\t\t</field.FieldSet>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}}\n\t\t\t\t\t</eventRegistrationForm.AppField>\n\t\t\t\t\t<eventRegistrationForm.AppField name={\"comments\"}>\n\t\t\t\t\t\t{(field) => (\n\t\t\t\t\t\t\t<field.FieldSet className=\"w-full\">\n\t\t\t\t\t\t\t\t<field.Field>\n\t\t\t\t\t\t\t\t\t<field.FieldLabel htmlFor={\"comments\"}>\n\t\t\t\t\t\t\t\t\t\tAdditional Comments{\" \"}\n\t\t\t\t\t\t\t\t\t</field.FieldLabel>\n\t\t\t\t\t\t\t\t\t<Textarea\n\t\t\t\t\t\t\t\t\t\tplaceholder=\"Any special requirements or questions?\"\n\t\t\t\t\t\t\t\t\t\trequired={false}\n\t\t\t\t\t\t\t\t\t\tdisabled={false}\n\t\t\t\t\t\t\t\t\t\tvalue={(field.state.value as string | undefined) ?? \"\"}\n\t\t\t\t\t\t\t\t\t\tname={\"comments\"}\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => field.handleChange(e.target.value)}\n\t\t\t\t\t\t\t\t\t\tonBlur={field.handleBlur}\n\t\t\t\t\t\t\t\t\t\tclassName=\"resize-none\"\n\t\t\t\t\t\t\t\t\t\taria-invalid={!!field.state.meta.errors.length}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</field.Field>\n\t\t\t\t\t\t\t\t<field.FieldError />\n\t\t\t\t\t\t\t</field.FieldSet>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</eventRegistrationForm.AppField>\n\t\t\t\t\t<div className=\"flex justify-end items-center w-full pt-3\">\n\t\t\t\t\t\t<eventRegistrationForm.SubmitButton label=\"Submit\" />\n\t\t\t\t\t</div>\n\t\t\t\t</eventRegistrationForm.Form>\n\t\t\t</eventRegistrationForm.AppForm>\n\t\t</div>\n\t);\n}\n",
      "type": "registry:component"
    }
  ]
}