{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tanstack-form",
  "type": "registry:ui",
  "title": "Tanstack Builder Form",
  "description": "TanStack Form",
  "files": [
    {
      "path": "src/components/ui/tanstack-form.tsx",
      "content": "import {\n  createFormHook,\n  createFormHookContexts,\n  useStore,\n} from \"@tanstack/react-form\";\nimport type { VariantProps } from \"class-variance-authority\";\nimport * as React from \"react\";\nimport { Button, type buttonVariants } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { cn } from \"@/lib/utils\";\nimport { Slot } from \"@radix-ui/react-slot\";\n\nconst {\n  fieldContext,\n  formContext,\n  useFieldContext: _useFieldContext,\n  useFormContext,\n} = createFormHookContexts();\n\nconst { useAppForm, withForm, withFieldGroup } = createFormHook({\n  fieldContext,\n  formContext,\n  fieldComponents: {\n    FormLabel,\n    FormControl,\n    FormDescription,\n    FormMessage,\n    FormItem,\n  },\n  formComponents: {\n    SubmitButton,\n    StepButton,\n    Form,\n  },\n});\n\ntype FormItemContextValue = {\n  id: string;\n};\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue,\n);\n\nfunction FormItem({ className, ...props }: React.ComponentProps<\"div\">) {\n  const id = React.useId();\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div\n        data-slot=\"form-item\"\n        className={cn(\"grid gap-2\", className)}\n        {...props}\n      />\n    </FormItemContext.Provider>\n  );\n}\n\nconst useFieldContext = () => {\n  const { id } = React.useContext(FormItemContext);\n  const { name, store, ...fieldContext } = _useFieldContext();\n\n  const errors = useStore(store, (state) => state.meta.errors);\n  if (!fieldContext) {\n    throw new Error(\"useFieldContext should be used within <FormItem>\");\n  }\n\n  return {\n    id,\n    name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    errors,\n    store,\n    ...fieldContext,\n  };\n};\n\nfunction FormLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof Label>) {\n  const { formItemId, errors } = useFieldContext();\n\n  return (\n    <Label\n      data-slot=\"form-label\"\n      data-error={!!errors.length}\n      className={cn(\"data-[error=true]:text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  );\n}\n\nfunction FormControl({ ...props }: React.ComponentProps<typeof Slot>) {\n  const { errors, formItemId, formDescriptionId, formMessageId } =\n    useFieldContext();\n\n  return (\n    <Slot\n      data-slot=\"form-control\"\n      id={formItemId}\n      aria-describedby={\n        !errors.length\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!errors.length}\n      {...props}\n    />\n  );\n}\n\nfunction FormDescription({ className, ...props }: React.ComponentProps<\"p\">) {\n  const { formDescriptionId } = useFieldContext();\n\n  return (\n    <p\n      data-slot=\"form-description\"\n      id={formDescriptionId}\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction FormMessage({ className, ...props }: React.ComponentProps<\"p\">) {\n  const { errors, formMessageId } = useFieldContext();\n  const body = errors.length\n    ? String(errors.at(0)?.message ?? \"\")\n    : props.children;\n  if (!body) return null;\n  return (\n    <p\n      data-slot=\"form-message\"\n      id={formMessageId}\n      className={cn(\"text-destructive text-sm\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  );\n}\n\nfunction Form({ children }: { children?: React.ReactNode }) {\n  const form = useFormContext();\n  const handleSubmit = React.useCallback(\n    (e: React.FormEvent) => {\n      e.preventDefault();\n      e.stopPropagation();\n      form.handleSubmit();\n    },\n    [form],\n  );\n  return (\n    <form\n      onSubmit={handleSubmit}\n      className=\"flex flex-col p-2 md:p-5 w-full mx-auto rounded-md max-w-3xl gap-2 border\"\n      noValidate\n    >\n      {children}\n    </form>\n  );\n}\n\nfunction SubmitButton({\n  label,\n  className,\n  size,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    label: string;\n  }) {\n  const form = useFormContext();\n  return (\n    <form.Subscribe selector={(state) => state.isSubmitting}>\n      {(isSubmitting) => (\n        <Button\n          className={className}\n          size={size}\n          type=\"submit\"\n          disabled={isSubmitting}\n          {...props}\n        >\n          {isSubmitting && (\n            <div className=\"w-4 h-4 border-2 border-secondary border-t-transparent rounded-full animate-spin\" />\n          )}\n          {label}\n        </Button>\n      )}\n    </form.Subscribe>\n  );\n}\n\nfunction StepButton({\n  label,\n  handleMovement,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    label: string;\n    handleMovement: () => Promise<boolean>;\n  }) {\n  return (\n    <Button size=\"sm\" variant=\"ghost\" type=\"button\" onClick={handleMovement} {...props}>\n      {label}\n    </Button>\n  );\n}\n\nexport {\n  useAppForm,\n  useFormContext,\n  useFieldContext,\n  withForm,\n  withFieldGroup,\n};\n",
      "type": "registry:ui"
    },
    {
      "path": "src/hooks/use-stepper.tsx",
      "content": "import { useState, useCallback } from \"react\";\nimport type { AnyFormApi } from \"@tanstack/react-form\";\nimport type { ZodObject } from \"zod\";\n\n/**\n * Options for handling cancel/back actions\n */\ntype HandleCancelOrBackOpts = {\n  onBack?: VoidFunction;\n  onCancel?: VoidFunction;\n};\n\n/**\n * State of the current step\n */\ntype StepState = {\n  value: number;\n  count: number;\n  goToNextStep: () => void;\n  goToPrevStep: () => void;\n  isCompleted: boolean;\n};\n\n/**\n * Hook for managing multi-step form navigation and validation\n *\n * @param schemas - Array of Zod schemas for each step\n * @returns Object with stepper state and methods\n */\nexport function useFormStepper(schemas: ZodObject[]) {\n  const stepCount = schemas.length;\n  const [currentStep, setCurrentStep] = useState(1); // Start from 1\n\n  const goToNextStep = useCallback(() => {\n    setCurrentStep((prev) => Math.min(prev + 1, stepCount));\n  }, [stepCount]);\n\n  const goToPrevStep = useCallback(() => {\n    setCurrentStep((prev) => Math.max(prev - 1, 1));\n  }, []);\n\n  const step: StepState = {\n    value: currentStep,\n    count: stepCount,\n    goToNextStep,\n    goToPrevStep,\n    isCompleted: currentStep === stepCount,\n  };\n\n  const currentValidator = schemas[currentStep - 1]; // Convert to 0-based for array access\n  const isFirstStep = currentStep === 1;\n\n  const triggerFormGroup = async (form: AnyFormApi) => {\n    const result = currentValidator.safeParse(form.state.values);\n    if (!result.success) {\n      await form.handleSubmit({ step: String(currentStep) });\n      return result;\n    }\n\n    return result;\n  };\n\n  const handleNextStepOrSubmit = async (form: AnyFormApi) => {\n    const result = await triggerFormGroup(form);\n    if (!result.success) {\n      return;\n    }\n\n    if (currentStep < stepCount) {\n      goToNextStep();\n      return;\n    }\n\n    if (currentStep === stepCount) {\n      form.handleSubmit();\n    }\n  };\n\n  const handleCancelOrBack = (opts?: HandleCancelOrBackOpts) => {\n    if (isFirstStep || step.isCompleted) {\n      opts?.onCancel?.();\n      return;\n    }\n\n    if (currentStep > 1) {\n      opts?.onBack?.();\n      goToPrevStep();\n    }\n  };\n\n  return {\n    step, // Current step state\n    currentStep, // Current step number (1-based)\n    isFirstStep, // Whether current step is the first step\n    currentValidator, // Zod schema for current step\n    triggerFormGroup, // Validate current step fields\n    handleNextStepOrSubmit, // Handle next/submit action\n    handleCancelOrBack, // Handle back/cancel action\n  };\n}\n",
      "type": "registry:hook"
    }
  ]
}