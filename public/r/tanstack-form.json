{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tanstack-form",
  "type": "registry:ui",
  "title": "Tanstack Builder Form",
  "description": "TanStack Form",
  "dependencies": [
    "@tanstack/react-form",
    "class-variance-authority"
  ],
  "registryDependencies": [
    "button",
    "input-group",
    "spinner",
    "button-group",
    "https://tan-form-builder.baskar.dev/r/tanstack-form.json"
  ],
  "files": [
    {
      "path": "src/components/ui/field.tsx",
      "content": "import { cva, type VariantProps } from \"class-variance-authority\";\nimport { useMemo } from \"react\";\nimport { Label } from \"@/components/ui/label\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { cn } from \"@/lib/utils\";\n\nfunction FieldSet({ className, ...props }: React.ComponentProps<\"fieldset\">) {\n\treturn (\n\t\t<fieldset\n\t\t\tdata-slot=\"field-set\"\n\t\t\tclassName={cn(\n\t\t\t\t\"flex flex-col gap-6\",\n\t\t\t\t\"has-[>[data-slot=checkbox-group]]:gap-3 has-[>[data-slot=radio-group]]:gap-3\",\n\t\t\t\tclassName,\n\t\t\t)}\n\t\t\t{...props}\n\t\t/>\n\t);\n}\n\nfunction FieldLegend({\n\tclassName,\n\tvariant = \"legend\",\n\t...props\n}: React.ComponentProps<\"legend\"> & { variant?: \"legend\" | \"label\" }) {\n\treturn (\n\t\t<legend\n\t\t\tdata-slot=\"field-legend\"\n\t\t\tdata-variant={variant}\n\t\t\tclassName={cn(\n\t\t\t\t\"mb-3 font-medium\",\n\t\t\t\t\"data-[variant=legend]:text-base\",\n\t\t\t\t\"data-[variant=label]:text-sm\",\n\t\t\t\tclassName,\n\t\t\t)}\n\t\t\t{...props}\n\t\t/>\n\t);\n}\n\nfunction FieldGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n\treturn (\n\t\t<div\n\t\t\tdata-slot=\"field-group\"\n\t\t\tclassName={cn(\n\t\t\t\t\"group/field-group @container/field-group flex w-full flex-col gap-7 data-[slot=checkbox-group]:gap-3 [&>[data-slot=field-group]]:gap-4\",\n\t\t\t\tclassName,\n\t\t\t)}\n\t\t\t{...props}\n\t\t/>\n\t);\n}\n\nexport const fieldVariants = cva(\n\t\"group/field flex w-full gap-3 data-[invalid=true]:text-destructive\",\n\t{\n\t\tvariants: {\n\t\t\torientation: {\n\t\t\t\tvertical: [\"flex-col [&>*]:w-full [&>.sr-only]:w-auto\"],\n\t\t\t\thorizontal: [\n\t\t\t\t\t\"flex-row items-center\",\n\t\t\t\t\t\"[&>[data-slot=field-label]]:flex-auto\",\n\t\t\t\t\t\"has-[>[data-slot=field-content]]:items-start has-[>[data-slot=field-content]]:[&>[role=checkbox],[role=radio]]:mt-px\",\n\t\t\t\t],\n\t\t\t\tresponsive: [\n\t\t\t\t\t\"flex-col [&>*]:w-full [&>.sr-only]:w-auto @md/field-group:flex-row @md/field-group:items-center @md/field-group:[&>*]:w-auto\",\n\t\t\t\t\t\"@md/field-group:[&>[data-slot=field-label]]:flex-auto\",\n\t\t\t\t\t\"@md/field-group:has-[>[data-slot=field-content]]:items-start @md/field-group:has-[>[data-slot=field-content]]:[&>[role=checkbox],[role=radio]]:mt-px\",\n\t\t\t\t],\n\t\t\t},\n\t\t},\n\t\tdefaultVariants: {\n\t\t\torientation: \"vertical\",\n\t\t},\n\t},\n);\n\nfunction Field({\n\tclassName,\n\torientation = \"vertical\",\n\t...props\n}: React.ComponentProps<\"div\"> & VariantProps<typeof fieldVariants>) {\n\treturn (\n\t\t<div\n\t\t\trole=\"group\"\n\t\t\tdata-slot=\"field\"\n\t\t\tdata-orientation={orientation}\n\t\t\tclassName={cn(fieldVariants({ orientation }), className)}\n\t\t\t{...props}\n\t\t/>\n\t);\n}\n\nfunction FieldContent({ className, ...props }: React.ComponentProps<\"div\">) {\n\treturn (\n\t\t<div\n\t\t\tdata-slot=\"field-content\"\n\t\t\tclassName={cn(\n\t\t\t\t\"group/field-content flex flex-1 flex-col gap-1.5 leading-snug\",\n\t\t\t\tclassName,\n\t\t\t)}\n\t\t\t{...props}\n\t\t/>\n\t);\n}\n\nfunction FieldLabel({\n\tclassName,\n\t...props\n}: React.ComponentProps<typeof Label>) {\n\treturn (\n\t\t<Label\n\t\t\tdata-slot=\"field-label\"\n\t\t\tclassName={cn(\n\t\t\t\t\"group/field-label peer/field-label flex w-fit gap-2 leading-snug group-data-[disabled=true]/field:opacity-50\",\n\t\t\t\t\"has-[>[data-slot=field]]:w-full has-[>[data-slot=field]]:flex-col has-[>[data-slot=field]]:rounded-md has-[>[data-slot=field]]:border [&>*]:data-[slot=field]:p-4\",\n\t\t\t\t\"has-data-[state=checked]:bg-primary/5 has-data-[state=checked]:border-primary dark:has-data-[state=checked]:bg-primary/10\",\n\t\t\t\tclassName,\n\t\t\t)}\n\t\t\t{...props}\n\t\t/>\n\t);\n}\n\nfunction FieldTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n\treturn (\n\t\t<div\n\t\t\tdata-slot=\"field-label\"\n\t\t\tclassName={cn(\n\t\t\t\t\"flex w-fit items-center gap-2 text-sm leading-snug font-medium group-data-[disabled=true]/field:opacity-50\",\n\t\t\t\tclassName,\n\t\t\t)}\n\t\t\t{...props}\n\t\t/>\n\t);\n}\n\nfunction FieldDescription({ className, ...props }: React.ComponentProps<\"p\">) {\n\treturn (\n\t\t<p\n\t\t\tdata-slot=\"field-description\"\n\t\t\tclassName={cn(\n\t\t\t\t\"text-muted-foreground text-sm leading-normal font-normal group-has-[[data-orientation=horizontal]]/field:text-balance\",\n\t\t\t\t\"last:mt-0 nth-last-2:-mt-1 [[data-variant=legend]+&]:-mt-1.5\",\n\t\t\t\t\"[&>a:hover]:text-primary [&>a]:underline [&>a]:underline-offset-4\",\n\t\t\t\tclassName,\n\t\t\t)}\n\t\t\t{...props}\n\t\t/>\n\t);\n}\n\nfunction FieldSeparator({\n\tchildren,\n\tclassName,\n\t...props\n}: React.ComponentProps<\"div\"> & {\n\tchildren?: React.ReactNode;\n}) {\n\treturn (\n\t\t<div\n\t\t\tdata-slot=\"field-separator\"\n\t\t\tdata-content={!!children}\n\t\t\tclassName={cn(\n\t\t\t\t\"relative -my-2 h-5 text-sm group-data-[variant=outline]/field-group:-mb-2\",\n\t\t\t\tclassName,\n\t\t\t)}\n\t\t\t{...props}\n\t\t>\n\t\t\t<Separator className=\"absolute inset-0 top-1/2\" />\n\t\t\t{children && (\n\t\t\t\t<span\n\t\t\t\t\tclassName=\"bg-background text-muted-foreground relative mx-auto block w-fit px-2\"\n\t\t\t\t\tdata-slot=\"field-separator-content\"\n\t\t\t\t>\n\t\t\t\t\t{children}\n\t\t\t\t</span>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n\nfunction FieldError({\n\tclassName,\n\tchildren,\n\terrors,\n\t...props\n}: React.ComponentProps<\"div\"> & {\n\terrors?: Array<{ message?: string } | undefined>;\n}) {\n\tconst content = useMemo(() => {\n\t\tif (children) {\n\t\t\treturn children;\n\t\t}\n\n\t\tif (!errors) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (errors?.length === 1 && errors[0]?.message) {\n\t\t\treturn errors[0].message;\n\t\t}\n\n\t\treturn (\n\t\t\t<ul className=\"ml-4 flex list-disc flex-col gap-1\">\n\t\t\t\t{errors.map(\n\t\t\t\t\t(error, index) =>\n\t\t\t\t\t\terror?.message && <li key={index}>{error.message}</li>,\n\t\t\t\t)}\n\t\t\t</ul>\n\t\t);\n\t}, [children, errors]);\n\n\tif (!content) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<div\n\t\t\trole=\"alert\"\n\t\t\tdata-slot=\"field-error\"\n\t\t\tclassName={cn(\"text-destructive text-sm font-normal\", className)}\n\t\t\t{...props}\n\t\t>\n\t\t\t{content}\n\t\t</div>\n\t);\n}\n\nexport {\n\tField,\n\tFieldLabel,\n\tFieldDescription,\n\tFieldError,\n\tFieldGroup,\n\tFieldLegend,\n\tFieldSeparator,\n\tFieldSet,\n\tFieldContent,\n\tFieldTitle,\n};\n",
      "type": "registry:ui"
    },
    {
      "path": "src/components/ui/tanstack-form.tsx",
      "content": "import {\n\tcreateFormHook,\n\tcreateFormHookContexts,\n\trevalidateLogic,\n\tuseStore,\n} from \"@tanstack/react-form\";\nimport type { VariantProps } from \"class-variance-authority\";\nimport * as React from \"react\";\nimport { Button, type buttonVariants } from \"@/components/ui/button\";\nimport {\n\tField as DefaultField,\n\tFieldError as DefaultFieldError,\n\tFieldSet as DefaultFieldSet,\n\tFieldContent,\n\tFieldDescription,\n\tFieldGroup,\n\tFieldLabel,\n\tFieldLegend,\n\tFieldSeparator,\n\tFieldTitle,\n\tfieldVariants,\n} from \"@/components/ui/field\";\nimport {\n\tInputGroup,\n\tInputGroupAddon,\n\tInputGroupInput,\n} from \"@/components/ui/input-group\";\nimport { Spinner } from \"@/components/ui/spinner\";\nimport { cn } from \"@/lib/utils\";\n\nconst {\n\tfieldContext,\n\tformContext,\n\tuseFieldContext: _useFieldContext,\n\tuseFormContext,\n} = createFormHookContexts();\n\nconst { useAppForm, withForm, withFieldGroup } = createFormHook({\n\tfieldContext,\n\tformContext,\n\tfieldComponents: {\n\t\tField,\n\t\tFieldError,\n\t\tFieldSet,\n\t\tFieldContent,\n\t\tFieldDescription,\n\t\tFieldGroup,\n\t\tFieldLabel,\n\t\tFieldLegend,\n\t\tFieldSeparator,\n\t\tFieldTitle,\n\t\tInputGroup,\n\t\tInputGroupAddon,\n\t\tInputGroupInput,\n\t},\n\tformComponents: {\n\t\tSubmitButton,\n\t\tStepButton,\n\t\tFieldLegend,\n\t\tFieldDescription,\n\t\tFieldSeparator,\n\t\tForm,\n\t},\n});\n\ntype FormItemContextValue = {\n\tid: string;\n};\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n\t{} as FormItemContextValue,\n);\n\nfunction FieldSet({\n\tclassName,\n\tchildren,\n\t...props\n}: React.ComponentProps<\"fieldset\">) {\n\tconst id = React.useId();\n\n\treturn (\n\t\t<FormItemContext.Provider value={{ id }}>\n\t\t\t<DefaultFieldSet className={cn(\"grid gap-1\", className)} {...props}>\n\t\t\t\t{children}\n\t\t\t</DefaultFieldSet>\n\t\t</FormItemContext.Provider>\n\t);\n}\n\nconst useFieldContext = () => {\n\tconst { id } = React.useContext(FormItemContext);\n\tconst { name, store, ...fieldContext } = _useFieldContext();\n\n\tconst errors = useStore(store, (state) => state.meta.errors);\n\tif (!fieldContext) {\n\t\tthrow new Error(\"useFieldContext should be used within <FormItem>\");\n\t}\n\n\treturn {\n\t\tid,\n\t\tname,\n\t\tformItemId: `${id}-form-item`,\n\t\tformDescriptionId: `${id}-form-item-description`,\n\t\tformMessageId: `${id}-form-item-message`,\n\t\terrors,\n\t\tstore,\n\t\t...fieldContext,\n\t};\n};\n\nfunction Field({\n\tchildren,\n\t...props\n}: React.ComponentProps<\"div\"> & VariantProps<typeof fieldVariants>) {\n\tconst { errors, formItemId, formDescriptionId, formMessageId } =\n\t\tuseFieldContext();\n\n\treturn (\n\t\t<DefaultField\n\t\t\tdata-invalid={!!errors.length}\n\t\t\tid={formItemId}\n\t\t\taria-describedby={\n\t\t\t\t!errors.length\n\t\t\t\t\t? `${formDescriptionId}`\n\t\t\t\t\t: `${formDescriptionId} ${formMessageId}`\n\t\t\t}\n\t\t\taria-invalid={!!errors.length}\n\t\t\t{...props}\n\t\t>\n\t\t\t{children}\n\t\t</DefaultField>\n\t);\n}\n\nfunction FieldError({ className, ...props }: React.ComponentProps<\"p\">) {\n\tconst { errors, formMessageId } = useFieldContext();\n\tconst body = errors.length ? String(errors.at(0)?.message ?? \"\") : \"\";\n\tif (!body) return null;\n\treturn (\n\t\t<DefaultFieldError\n\t\t\tdata-slot=\"form-message\"\n\t\t\tid={formMessageId}\n\t\t\tclassName={cn(\"text-destructive text-sm\", className)}\n\t\t\t{...props}\n\t\t\terrors={body ? [{ message: body }] : []}\n\t\t/>\n\t);\n}\n\nfunction Form({\n\tchildren,\n\t...props\n}: Omit<React.ComponentPropsWithoutRef<\"form\">, \"onSubmit\" & \"noValidate\"> & {\n\tchildren?: React.ReactNode;\n}) {\n\tconst form = useFormContext();\n\tconst handleSubmit = React.useCallback(\n\t\t(e: React.FormEvent<HTMLFormElement>) => {\n\t\t\te.preventDefault();\n\t\t\te.stopPropagation();\n\t\t\tform.handleSubmit();\n\t\t},\n\t\t[form],\n\t);\n\treturn (\n\t\t<form\n\t\t\tonSubmit={handleSubmit}\n\t\t\tclassName={cn(\n\t\t\t\t\"flex flex-col p-2 md:p-5 w-full mx-auto gap-2\",\n\t\t\t\tprops.className,\n\t\t\t)}\n\t\t\tnoValidate\n\t\t\t{...props}\n\t\t>\n\t\t\t{children}\n\t\t</form>\n\t);\n}\n\nfunction SubmitButton({\n\tlabel,\n\tclassName,\n\tsize,\n\t...props\n}: React.ComponentProps<\"button\"> &\n\tVariantProps<typeof buttonVariants> & {\n\t\tlabel: string;\n\t}) {\n\tconst form = useFormContext();\n\treturn (\n\t\t<form.Subscribe selector={(state) => state.isSubmitting}>\n\t\t\t{(isSubmitting) => (\n\t\t\t\t<Button\n\t\t\t\t\tclassName={className}\n\t\t\t\t\tsize={size}\n\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\tdisabled={isSubmitting}\n\t\t\t\t\t{...props}\n\t\t\t\t>\n\t\t\t\t\t{isSubmitting && <Spinner />}\n\t\t\t\t\t{label}\n\t\t\t\t</Button>\n\t\t\t)}\n\t\t</form.Subscribe>\n\t);\n}\n\nfunction StepButton({\n\tlabel,\n\thandleMovement,\n\t...props\n}: React.ComponentProps<\"button\"> &\n\tVariantProps<typeof buttonVariants> & {\n\t\tlabel: React.ReactNode | string;\n\t\thandleMovement: () => void;\n\t}) {\n\treturn (\n\t\t<Button\n\t\t\tsize=\"sm\"\n\t\t\tvariant=\"ghost\"\n\t\t\ttype=\"button\"\n\t\t\tonClick={handleMovement}\n\t\t\t{...props}\n\t\t>\n\t\t\t{label}\n\t\t</Button>\n\t);\n}\n\nexport {\n\trevalidateLogic,\n\tuseAppForm,\n\tuseFieldContext,\n\tuseFormContext,\n\twithFieldGroup,\n\twithForm,\n};\n",
      "type": "registry:ui"
    },
    {
      "path": "src/hooks/use-stepper.tsx",
      "content": "import type { AnyFormApi } from \"@tanstack/react-form\";\nimport { useCallback, useState } from \"react\";\nimport type { ZodObject } from \"zod\";\n\n/**\n * Options for handling cancel/back actions\n */\ntype HandleCancelOrBackOpts = {\n\tonBack?: VoidFunction;\n\tonCancel?: VoidFunction;\n};\n\n/**\n * State of the current step\n */\ntype StepState = {\n\tvalue: number;\n\tcount: number;\n\tgoToNextStep: () => void;\n\tgoToPrevStep: () => void;\n\tisCompleted: boolean;\n};\n\n/**\n * Hook for managing multi-step form navigation and validation\n *\n * @param schemas - Array of Zod schemas for each step\n * @returns Object with stepper state and methods\n */\nexport function useFormStepper(schemas: ZodObject[]) {\n\tconst stepCount = schemas.length;\n\tconst [currentStep, setCurrentStep] = useState(1); // Start from 1\n\n\tconst goToNextStep = useCallback(() => {\n\t\tsetCurrentStep((prev) => Math.min(prev + 1, stepCount));\n\t}, [stepCount]);\n\n\tconst goToPrevStep = useCallback(() => {\n\t\tsetCurrentStep((prev) => Math.max(prev - 1, 1));\n\t}, []);\n\n\tconst step: StepState = {\n\t\tvalue: currentStep,\n\t\tcount: stepCount,\n\t\tgoToNextStep,\n\t\tgoToPrevStep,\n\t\tisCompleted: currentStep === stepCount,\n\t};\n\n\tconst currentValidator = schemas[currentStep - 1]; // Convert to 0-based for array access\n\tconst isFirstStep = currentStep === 1;\n\n\tconst triggerFormGroup = async (form: AnyFormApi) => {\n\t\tconst result = currentValidator.safeParse(form.state.values);\n\t\tif (!result.success) {\n\t\t\tawait form.handleSubmit({ step: String(currentStep) });\n\t\t\treturn result;\n\t\t}\n\n\t\treturn result;\n\t};\n\n\tconst handleNextStepOrSubmit = async (form: AnyFormApi) => {\n\t\tconst result = await triggerFormGroup(form);\n\t\tif (!result.success) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (currentStep < stepCount) {\n\t\t\tgoToNextStep();\n\t\t\treturn;\n\t\t}\n\n\t\tif (currentStep === stepCount) {\n\t\t\tform.handleSubmit();\n\t\t}\n\t};\n\n\tconst handleCancelOrBack = (opts?: HandleCancelOrBackOpts) => {\n\t\tif (isFirstStep || step.isCompleted) {\n\t\t\topts?.onCancel?.();\n\t\t\treturn;\n\t\t}\n\n\t\tif (currentStep > 1) {\n\t\t\topts?.onBack?.();\n\t\t\tgoToPrevStep();\n\t\t}\n\t};\n\n\treturn {\n\t\tstep, // Current step state\n\t\tcurrentStep, // Current step number (1-based)\n\t\tisFirstStep, // Whether current step is the first step\n\t\tcurrentValidator, // Zod schema for current step\n\t\ttriggerFormGroup, // Validate current step fields\n\t\thandleNextStepOrSubmit, // Handle next/submit action\n\t\thandleCancelOrBack, // Handle back/cancel action\n\t};\n}\n",
      "type": "registry:hook"
    }
  ]
}