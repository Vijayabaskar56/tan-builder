{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tanstack-form",
  "type": "registry:component",
  "title": "Tanstack Form With ShadCN",
  "description": "Tanstack Forms with ShadCN Styling",
  "dependencies": [
    "@tanstack/react-form",
    "@radix-ui/react-slot",
    "@radix-ui/react-label",
    "class-variance-authority"
  ],
  "files": [
    {
      "path": "src/components/ui/tanstack-form.tsx",
      "content": "\nimport {\n\tcreateFormHook,\n\tcreateFormHookContexts,\n\tuseStore,\n} from \"@tanstack/react-form\";\nimport type { VariantProps } from \"class-variance-authority\";\nimport * as React from \"react\";\nimport { Button, type buttonVariants } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { cn } from \"@/lib/utils\";\nimport { Slot } from \"@radix-ui/react-slot\";\n\nconst {\n\tfieldContext,\n\tformContext,\n\tuseFieldContext: _useFieldContext,\n\tuseFormContext,\n} = createFormHookContexts();\n\nconst { useAppForm, withForm } = createFormHook({\n\tfieldContext,\n\tformContext,\n\tfieldComponents: {\n\t\tFormLabel,\n\t\tFormControl,\n\t\tFormDescription,\n\t\tFormMessage,\n\t\tFormItem,\n\t},\n\tformComponents: {\n\t\tSubmitButton,\n  StepButton,\n\t\tForm,\n\t},\n});\n\ntype FormItemContextValue = {\n\tid: string;\n};\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n\t{} as FormItemContextValue,\n);\n\nfunction FormItem({ className, ...props }: React.ComponentProps<\"div\">) {\n\tconst id = React.useId();\n\n\treturn (\n\t\t<FormItemContext.Provider value={{ id }}>\n\t\t\t<div\n\t\t\t\tdata-slot=\"form-item\"\n\t\t\t\tclassName={cn(\"grid gap-2\", className)}\n\t\t\t\t{...props}\n\t\t\t/>\n\t\t</FormItemContext.Provider>\n\t);\n}\n\nconst useFieldContext = () => {\n\tconst { id } = React.useContext(FormItemContext);\n\tconst { name, store, ...fieldContext } = _useFieldContext();\n\n\tconst errors = useStore(store, (state) => state.meta.errors);\n\tif (!fieldContext) {\n\t\tthrow new Error(\"useFieldContext should be used within <FormItem>\");\n\t}\n\n\treturn {\n\t\tid,\n\t\tname,\n\t\tformItemId: `${id}-form-item`,\n\t\tformDescriptionId: `${id}-form-item-description`,\n\t\tformMessageId: `${id}-form-item-message`,\n\t\terrors,\n\t\tstore,\n\t\t...fieldContext,\n\t};\n};\n\nfunction FormLabel({\n\tclassName,\n\t...props\n}: React.ComponentProps<typeof Label>) {\n\tconst { formItemId, errors } = useFieldContext();\n\n\treturn (\n\t\t<Label\n\t\t\tdata-slot=\"form-label\"\n\t\t\tdata-error={!!errors.length}\n\t\t\tclassName={cn(\"data-[error=true]:text-destructive\", className)}\n\t\t\thtmlFor={formItemId}\n\t\t\t{...props}\n\t\t/>\n\t);\n}\n\nfunction FormControl({ ...props }: React.ComponentProps<typeof Slot>) {\n\tconst { errors, formItemId, formDescriptionId, formMessageId } =\n\t\tuseFieldContext();\n\n\treturn (\n\t\t<Slot\n\t\t\tdata-slot=\"form-control\"\n\t\t\tid={formItemId}\n\t\t\taria-describedby={\n\t\t\t\t!errors.length\n\t\t\t\t\t? `${formDescriptionId}`\n\t\t\t\t\t: `${formDescriptionId} ${formMessageId}`\n\t\t\t}\n\t\t\taria-invalid={!!errors.length}\n\t\t\t{...props}\n\t\t/>\n\t);\n}\n\nfunction FormDescription({ className, ...props }: React.ComponentProps<\"p\">) {\n\tconst { formDescriptionId } = useFieldContext();\n\n\treturn (\n\t\t<p\n\t\t\tdata-slot=\"form-description\"\n\t\t\tid={formDescriptionId}\n\t\t\tclassName={cn(\"text-muted-foreground text-sm\", className)}\n\t\t\t{...props}\n\t\t/>\n\t);\n}\n\nfunction FormMessage({ className, ...props }: React.ComponentProps<\"p\">) {\n\tconst { errors, formMessageId } = useFieldContext();\n\tconst body = errors.length\n\t\t? String(errors.at(0)?.message ?? \"\")\n\t\t: props.children;\n\tif (!body) return null;\n\treturn (\n\t\t<p\n\t\t\tdata-slot=\"form-message\"\n\t\t\tid={formMessageId}\n\t\t\tclassName={cn(\"text-destructive text-sm\", className)}\n\t\t\t{...props}\n\t\t>\n\t\t\t{body}\n\t\t</p>\n\t);\n}\n\nfunction Form({ children }: { children?: React.ReactNode }) {\n\tconst form = useFormContext();\n\tconst handleSubmit = React.useCallback(\n\t\t(e: React.FormEvent) => {\n\t\t\te.preventDefault();\n\t\t\te.stopPropagation();\n\t\t\tform.handleSubmit();\n\t\t},\n\t\t[form],\n\t);\n\treturn (\n\t\t<form\n\t\t\tonSubmit={handleSubmit}\n\t\t\tclassName=\"flex flex-col p-2 md:p-5 w-full mx-auto rounded-md max-w-3xl gap-2 border\"\n\t\t\tnoValidate\n\t\t>\n\t\t\t{children}\n\t\t</form>\n\t);\n}\n\nfunction SubmitButton({ label }: { label: string }) {\n\tconst form = useFormContext();\n\treturn (\n\t\t<form.Subscribe selector={(state) => state.isSubmitting}>\n\t\t\t{(isSubmitting) => (\n\t\t\t\t<Button type=\"submit\" disabled={isSubmitting}>\n\t\t\t\t\t{isSubmitting && (\n\t\t\t\t\t\t<div className=\"w-4 h-4 border-2 border-secondary border-t-transparent rounded-full animate-spin\" />\n\t\t\t\t\t)}\n\t\t\t\t\t{label}\n\t\t\t\t</Button>\n\t\t\t)}\n\t\t</form.Subscribe>\n\t);\n}\n\nfunction StepButton({\n\tlabel,\n\thandleMovement,\n}: React.ComponentProps<\"button\"> &\n\tVariantProps<typeof buttonVariants> & {\n\t\tlabel: string;\n\t\thandleMovement: () => Promise<boolean>;\n\t}) {\n\treturn (\n\t\t<Button size=\"sm\" variant=\"ghost\" type=\"button\" onClick={handleMovement}>\n\t\t\t{label}\n\t\t</Button>\n\t);\n}\n\nexport { useAppForm, useFormContext, useFieldContext, withForm };\n",
      "type": "registry:ui"
    },
    {
      "path": "src/components/ui/button.tsx",
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n\t\"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n\t{\n\t\tvariants: {\n\t\t\tvariant: {\n\t\t\t\tdefault:\n\t\t\t\t\t\"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\n\t\t\t\tdestructive:\n\t\t\t\t\t\"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n\t\t\t\toutline:\n\t\t\t\t\t\"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n\t\t\t\tsecondary:\n\t\t\t\t\t\"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n\t\t\t\tghost:\n\t\t\t\t\t\"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n\t\t\t\tlink: \"text-primary underline-offset-4 hover:underline\",\n\t\t\t},\n\t\t\tsize: {\n\t\t\t\tdefault: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n\t\t\t\tsm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n\t\t\t\tlg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n\t\t\t\ticon: \"size-9\",\n\t\t\t},\n\t\t},\n\t\tdefaultVariants: {\n\t\t\tvariant: \"default\",\n\t\t\tsize: \"default\",\n\t\t},\n\t},\n);\n\nfunction Button({\n\tclassName,\n\tvariant,\n\tsize,\n\tasChild = false,\n\t...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n\treturn (\n\t\t<Comp\n\t\t\tdata-slot=\"button\"\n\t\t\tclassName={cn(buttonVariants({ variant, size, className }))}\n\t\t\t{...props}\n\t\t/>\n\t);\n}\n\nexport { Button, buttonVariants };\n",
      "type": "registry:ui"
    },
    {
      "path": "src/components/ui/label.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\n\nimport { cn } from \"@/lib/utils\";\n\nfunction Label({\n\tclassName,\n\t...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n\treturn (\n\t\t<LabelPrimitive.Root\n\t\t\tdata-slot=\"label\"\n\t\t\tclassName={cn(\n\t\t\t\t\"flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50\",\n\t\t\t\tclassName,\n\t\t\t)}\n\t\t\t{...props}\n\t\t/>\n\t);\n}\n\nexport { Label };\n",
      "type": "registry:ui"
    }
  ]
}