{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "feedback-form",
  "type": "registry:block",
  "title": "Feedback Form",
  "description": "A simple feedback form.",
  "dependencies": [
    "@tanstack/react-form",
    "sonner",
    "zod"
  ],
  "registryDependencies": [
    "field",
    "textarea",
    "https://tan-form-builder.baskar.dev/r/tanstack-form.json"
  ],
  "files": [
    {
      "path": "registry/default/feedback-form.tsx",
      "content": "import { revalidateLogic } from \"@tanstack/react-form\";\nimport { toast } from \"sonner\";\nimport * as z from \"zod\";\n\nimport { useAppForm } from \"@/components/ui/tanstack-form\";\nimport { Textarea } from \"@/components/ui/textarea\";\n\nconst feedBackSchema = z.object({\n\tcomment: z.string().min(1, \"This field is required\"),\n});\n\nexport function FeedbackForm() {\n\tconst feedBack = useAppForm({\n\t\tdefaultValues: {\n\t\t\tcomment: \"\",\n\t\t} as z.input<typeof feedBackSchema>,\n\t\tvalidationLogic: revalidateLogic(),\n\t\tvalidators: {\n\t\t\tonDynamic: feedBackSchema,\n\t\t\tonDynamicAsyncDebounceMs: 300,\n\t\t},\n\t\tonSubmit: ({}) => {\n\t\t\ttoast.success(\"success\");\n\t\t},\n\t\tonSubmitInvalid({ formApi }) {\n\t\t\tconst errorMap = formApi.state.errorMap[\"onDynamic\"]!;\n\t\t\tconst inputs = Array.from(\n\t\t\t\tdocument.querySelectorAll(\"#previewForm input\"),\n\t\t\t) as HTMLInputElement[];\n\t\t\tlet firstInput: HTMLInputElement | undefined;\n\t\t\tfor (const input of inputs) {\n\t\t\t\tif (errorMap[input.name]) {\n\t\t\t\t\tfirstInput = input;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfirstInput?.focus();\n\t\t},\n\t});\n\treturn (\n\t\t<div>\n\t\t\t<feedBack.AppForm>\n\t\t\t\t<feedBack.Form>\n\t\t\t\t\t<feedBack.FieldLegend className=\"text-3xl font-bold\">\n\t\t\t\t\t\tFeedback Form\n\t\t\t\t\t</feedBack.FieldLegend>\n\t\t\t\t\t<feedBack.FieldDescription>\n\t\t\t\t\t\tPlease provide your feedback\n\t\t\t\t\t</feedBack.FieldDescription>\n\t\t\t\t\t<feedBack.FieldSeparator />\n\t\t\t\t\t<feedBack.AppField name={\"comment\"}>\n\t\t\t\t\t\t{(field) => (\n\t\t\t\t\t\t\t<field.FieldSet className=\"w-full\">\n\t\t\t\t\t\t\t\t<field.Field>\n\t\t\t\t\t\t\t\t\t<field.FieldLabel htmlFor={\"comment\"}>\n\t\t\t\t\t\t\t\t\t\tFeedback Comment *\n\t\t\t\t\t\t\t\t\t</field.FieldLabel>\n\t\t\t\t\t\t\t\t\t<Textarea\n\t\t\t\t\t\t\t\t\t\tplaceholder=\"Share your feedback\"\n\t\t\t\t\t\t\t\t\t\trequired={true}\n\t\t\t\t\t\t\t\t\t\tdisabled={false}\n\t\t\t\t\t\t\t\t\t\tvalue={(field.state.value as string | undefined) ?? \"\"}\n\t\t\t\t\t\t\t\t\t\tname={\"comment\"}\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => field.handleChange(e.target.value)}\n\t\t\t\t\t\t\t\t\t\tonBlur={field.handleBlur}\n\t\t\t\t\t\t\t\t\t\tclassName=\"resize-none\"\n\t\t\t\t\t\t\t\t\t\taria-invalid={!!field.state.meta.errors.length}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</field.Field>\n\t\t\t\t\t\t\t\t<field.FieldError />\n\t\t\t\t\t\t\t</field.FieldSet>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</feedBack.AppField>\n\t\t\t\t\t<div className=\"flex justify-end items-center w-full pt-3\">\n\t\t\t\t\t\t<feedBack.SubmitButton label=\"Submit\" />\n\t\t\t\t\t</div>\n\t\t\t\t</feedBack.Form>\n\t\t\t</feedBack.AppForm>\n\t\t</div>\n\t);\n}\n",
      "type": "registry:component"
    }
  ]
}