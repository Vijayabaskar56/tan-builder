import { describe, expect, it } from "vitest";
import { getArkTypeSchemaString } from "@/lib/schema-generators/generate-arktype-schema";

describe("Arktype Schema Generator - FormArray Support", () => {
	it("should generate schema for a simple FormArray", () => {
		const formElements = [
			{
				fieldType: "FormArray" as const,
				id: "users-array",
				name: "users",
				label: "Users",
				arrayField: [
					{
						fieldType: "Input" as const,
						id: "name-field",
						name: "users[0].name",
						label: "Name",
						required: true,
						type: "text",
					},
					{
						fieldType: "Input" as const,
						id: "email-field",
						name: "users[0].email",
						label: "Email",
						required: true,
						type: "email",
					},
				],
				entries: [],
			},
		];

		const schemaString = getArkTypeSchemaString(formElements as any);

		expect(schemaString).toContain("users");
		expect(schemaString).toContain("[]");
		expect(schemaString).toContain('"string"');
		expect(schemaString).toContain('"string.email"');
	});

	it("should handle multiple field types in FormArray", () => {
		const formElements = [
			{
				fieldType: "FormArray" as const,
				id: "complex-array",
				name: "items",
				label: "Items",
				arrayField: [
					{
						fieldType: "Input" as const,
						id: "name",
						name: "items[0].name",
						label: "Name",
						required: true,
						type: "text",
					},
					{
						fieldType: "Checkbox" as const,
						id: "active",
						name: "items[0].active",
						label: "Active",
						required: false,
					},
					{
						fieldType: "Select" as const,
						id: "role",
						name: "items[0].role",
						label: "Role",
						required: true,
						placeholder: "Select role",
						options: [
							{ value: "admin", label: "Admin" },
							{ value: "user", label: "User" },
						],
					},
				],
				entries: [],
			},
		];

		const schemaString = getArkTypeSchemaString(formElements as any);

		expect(schemaString).toContain("items");
		expect(schemaString).toContain("[]");
		expect(schemaString).toContain('"boolean"');
		expect(schemaString).toContain('"string >= 1"');
	});

	it("should handle mixed form elements and FormArrays", () => {
		const formElements = [
			{
				fieldType: "Input" as const,
				id: "title",
				name: "title",
				label: "Title",
				required: true,
				type: "text",
			},
			{
				fieldType: "FormArray" as const,
				id: "users",
				name: "users",
				label: "Users",
				arrayField: [
					{
						fieldType: "Input" as const,
						id: "user-name",
						name: "users[0].name",
						label: "Name",
						required: true,
						type: "text",
					},
				],
				entries: [],
			},
		];

		const schemaString = getArkTypeSchemaString(formElements as any);

		expect(schemaString).toContain("title");
		expect(schemaString).toContain("users");
		expect(schemaString).toContain("[]");
		expect(schemaString).toContain('"string"');
	});
});

describe("Arktype Schema Generator - Multi-Step Form Support", () => {
	it("should generate only formSchema for normal forms", () => {
		const formElements = [
			{
				fieldType: "Input" as const,
				id: "name",
				name: "name",
				label: "Name",
				required: true,
				type: "text",
			},
			{
				fieldType: "Input" as const,
				id: "email",
				name: "email",
				label: "Email",
				required: true,
				type: "email",
			},
		];

		const schemaString = getArkTypeSchemaString(formElements as any);

		expect(schemaString).toContain("export const formSchema = type");
		expect(schemaString).toContain("name: ");
		expect(schemaString).toContain('"string"');
		expect(schemaString).not.toContain("stepSchemas");
	});

	it("should generate both formSchema and stepSchemas for multi-step forms", () => {
		const formElements = [
			{
				fieldType: "Input" as const,
				id: "name",
				name: "name",
				label: "Name",
				required: true,
				type: "text",
			},
			{
				fieldType: "Input" as const,
				id: "email",
				name: "email",
				label: "Email",
				required: true,
				type: "email",
			},
		];

		// Mock step schemas (normally generated by processing form elements)
		const mockStepSchemas = [
			[
				{
					fieldType: "Input" as const,
					id: "name",
					name: "name",
					label: "Name",
					required: true,
					type: "text",
				},
			],
			[
				{
					fieldType: "Input" as const,
					id: "email",
					name: "email",
					label: "Email",
					required: true,
					type: "email",
				},
			],
		];

		const schemaString = getArkTypeSchemaString(
			formElements as any,
			true, // isMultiStep
			mockStepSchemas as any,
		);

		expect(schemaString).toContain("export const formSchema = type");
		expect(schemaString).toContain("export const stepSchemas = [");
		expect(schemaString).toContain("// Step 1");
		expect(schemaString).toContain("// Step 2");
		expect(schemaString).toContain("type({");
	});
});
